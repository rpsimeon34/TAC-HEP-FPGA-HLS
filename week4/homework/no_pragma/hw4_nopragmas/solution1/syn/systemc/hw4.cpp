// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "hw4.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic hw4::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic hw4::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> hw4::ap_ST_fsm_state1 = "1";
const sc_lv<3> hw4::ap_ST_fsm_state2 = "10";
const sc_lv<3> hw4::ap_ST_fsm_state3 = "100";
const sc_lv<32> hw4::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> hw4::ap_const_lv32_1 = "1";
const sc_lv<32> hw4::ap_const_lv32_2 = "10";
const sc_lv<3> hw4::ap_const_lv3_0 = "000";
const sc_lv<1> hw4::ap_const_lv1_1 = "1";
const sc_lv<3> hw4::ap_const_lv3_6 = "110";
const sc_lv<3> hw4::ap_const_lv3_1 = "1";
const bool hw4::ap_const_boolean_1 = true;

hw4::hw4(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln11_fu_89_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln11_fu_89_p2 );

    SC_METHOD(thread_icmp_ln11_fu_89_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( j_0_reg_78 );

    SC_METHOD(thread_in_A_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln12_fu_101_p1 );

    SC_METHOD(thread_in_A_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_in_B_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln12_fu_101_p1 );

    SC_METHOD(thread_in_B_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_j_fu_95_p2);
    sensitive << ( j_0_reg_78 );

    SC_METHOD(thread_mul_ln12_fu_107_p0);
    sensitive << ( in_A_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mul_ln12_fu_107_p1);
    sensitive << ( in_B_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mul_ln12_fu_107_p2);
    sensitive << ( mul_ln12_fu_107_p0 );
    sensitive << ( mul_ln12_fu_107_p1 );

    SC_METHOD(thread_out_r);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln11_fu_89_p2 );
    sensitive << ( sum_0_reg_65 );

    SC_METHOD(thread_out_r_ap_vld);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln11_fu_89_p2 );

    SC_METHOD(thread_sum_fu_113_p2);
    sensitive << ( sum_0_reg_65 );
    sensitive << ( mul_ln12_fu_107_p2 );

    SC_METHOD(thread_zext_ln12_fu_101_p1);
    sensitive << ( j_0_reg_78 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln11_fu_89_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "hw4_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, in_A_address0, "(port)in_A_address0");
    sc_trace(mVcdFile, in_A_ce0, "(port)in_A_ce0");
    sc_trace(mVcdFile, in_A_q0, "(port)in_A_q0");
    sc_trace(mVcdFile, in_B_address0, "(port)in_B_address0");
    sc_trace(mVcdFile, in_B_ce0, "(port)in_B_ce0");
    sc_trace(mVcdFile, in_B_q0, "(port)in_B_q0");
    sc_trace(mVcdFile, out_r, "(port)out_r");
    sc_trace(mVcdFile, out_r_ap_vld, "(port)out_r_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, j_fu_95_p2, "j_fu_95_p2");
    sc_trace(mVcdFile, j_reg_122, "j_reg_122");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln11_fu_89_p2, "icmp_ln11_fu_89_p2");
    sc_trace(mVcdFile, sum_fu_113_p2, "sum_fu_113_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, sum_0_reg_65, "sum_0_reg_65");
    sc_trace(mVcdFile, j_0_reg_78, "j_0_reg_78");
    sc_trace(mVcdFile, zext_ln12_fu_101_p1, "zext_ln12_fu_101_p1");
    sc_trace(mVcdFile, mul_ln12_fu_107_p0, "mul_ln12_fu_107_p0");
    sc_trace(mVcdFile, mul_ln12_fu_107_p1, "mul_ln12_fu_107_p1");
    sc_trace(mVcdFile, mul_ln12_fu_107_p2, "mul_ln12_fu_107_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("hw4.hdltvin.dat");
    mHdltvoutHandle.open("hw4.hdltvout.dat");
}

hw4::~hw4() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void hw4::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_0_reg_78 = j_reg_122.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_0_reg_78 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        sum_0_reg_65 = sum_fu_113_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sum_0_reg_65 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        j_reg_122 = j_fu_95_p2.read();
    }
}

void hw4::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void hw4::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void hw4::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void hw4::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln11_fu_89_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void hw4::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void hw4::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln11_fu_89_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void hw4::thread_icmp_ln11_fu_89_p2() {
    icmp_ln11_fu_89_p2 = (!j_0_reg_78.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_78.read() == ap_const_lv3_6);
}

void hw4::thread_in_A_address0() {
    in_A_address0 =  (sc_lv<3>) (zext_ln12_fu_101_p1.read());
}

void hw4::thread_in_A_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_A_ce0 = ap_const_logic_1;
    } else {
        in_A_ce0 = ap_const_logic_0;
    }
}

void hw4::thread_in_B_address0() {
    in_B_address0 =  (sc_lv<3>) (zext_ln12_fu_101_p1.read());
}

void hw4::thread_in_B_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        in_B_ce0 = ap_const_logic_1;
    } else {
        in_B_ce0 = ap_const_logic_0;
    }
}

void hw4::thread_j_fu_95_p2() {
    j_fu_95_p2 = (!j_0_reg_78.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_0_reg_78.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void hw4::thread_mul_ln12_fu_107_p0() {
    mul_ln12_fu_107_p0 = in_A_q0.read();
}

void hw4::thread_mul_ln12_fu_107_p1() {
    mul_ln12_fu_107_p1 = in_B_q0.read();
}

void hw4::thread_mul_ln12_fu_107_p2() {
    mul_ln12_fu_107_p2 = (!mul_ln12_fu_107_p0.read().is_01() || !mul_ln12_fu_107_p1.read().is_01())? sc_lv<32>(): sc_bigint<32>(mul_ln12_fu_107_p0.read()) * sc_bigint<32>(mul_ln12_fu_107_p1.read());
}

void hw4::thread_out_r() {
    out_r = sum_0_reg_65.read();
}

void hw4::thread_out_r_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln11_fu_89_p2.read(), ap_const_lv1_1))) {
        out_r_ap_vld = ap_const_logic_1;
    } else {
        out_r_ap_vld = ap_const_logic_0;
    }
}

void hw4::thread_sum_fu_113_p2() {
    sum_fu_113_p2 = (!mul_ln12_fu_107_p2.read().is_01() || !sum_0_reg_65.read().is_01())? sc_lv<32>(): (sc_biguint<32>(mul_ln12_fu_107_p2.read()) + sc_biguint<32>(sum_0_reg_65.read()));
}

void hw4::thread_zext_ln12_fu_101_p1() {
    zext_ln12_fu_101_p1 = esl_zext<64,3>(j_0_reg_78.read());
}

void hw4::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln11_fu_89_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void hw4::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_A_address0\" :  \"" << in_A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_A_ce0\" :  \"" << in_A_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_A_q0\" :  \"" << in_A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_B_address0\" :  \"" << in_B_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_B_ce0\" :  \"" << in_B_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_B_q0\" :  \"" << in_B_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r\" :  \"" << out_r.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ap_vld\" :  \"" << out_r_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

