// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _lec8Ex1_HH_
#define _lec8Ex1_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct lec8Ex1 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<6> > in_r_address0;
    sc_out< sc_logic > in_r_ce0;
    sc_in< sc_lv<32> > in_r_q0;
    sc_in< sc_lv<16> > a;
    sc_in< sc_lv<16> > b;
    sc_in< sc_lv<32> > c;
    sc_out< sc_lv<6> > out_r_address0;
    sc_out< sc_logic > out_r_ce0;
    sc_out< sc_logic > out_r_we0;
    sc_out< sc_lv<32> > out_r_d0;


    // Module declarations
    lec8Ex1(sc_module_name name);
    SC_HAS_PROCESS(lec8Ex1);

    ~lec8Ex1();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<4> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<6> > i_0_reg_96;
    sc_signal< sc_lv<32> > sext_ln22_fu_107_p1;
    sc_signal< sc_lv<32> > sext_ln22_reg_163;
    sc_signal< sc_lv<32> > res_fu_115_p2;
    sc_signal< sc_lv<32> > res_reg_168;
    sc_signal< sc_lv<32> > sext_ln22_1_fu_127_p1;
    sc_signal< sc_lv<32> > sext_ln22_1_reg_173;
    sc_signal< sc_lv<1> > icmp_ln14_fu_131_p2;
    sc_signal< sc_lv<1> > icmp_ln14_reg_178;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<6> > i_fu_137_p2;
    sc_signal< sc_lv<6> > i_reg_182;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > zext_ln17_fu_143_p1;
    sc_signal< sc_lv<64> > zext_ln17_reg_187;
    sc_signal< sc_lv<32> > mul_ln22_fu_148_p2;
    sc_signal< sc_lv<32> > mul_ln22_reg_197;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<6> > ap_phi_mux_i_0_phi_fu_100_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > res_fu_115_p0;
    sc_signal< sc_lv<32> > res_fu_115_p1;
    sc_signal< sc_lv<17> > sext_ln31_fu_111_p1;
    sc_signal< sc_lv<17> > add_ln22_1_fu_121_p2;
    sc_signal< sc_lv<32> > mul_ln22_fu_148_p0;
    sc_signal< sc_lv<16> > mul_ln22_fu_148_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<32> > add_ln22_fu_153_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<4> ap_ST_fsm_state1;
    static const sc_lv<4> ap_ST_fsm_pp0_stage0;
    static const sc_lv<4> ap_ST_fsm_pp0_stage1;
    static const sc_lv<4> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<17> ap_const_lv17_27;
    static const sc_lv<6> ap_const_lv6_3C;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln22_1_fu_121_p2();
    void thread_add_ln22_fu_153_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_0_phi_fu_100_p4();
    void thread_ap_ready();
    void thread_i_fu_137_p2();
    void thread_icmp_ln14_fu_131_p2();
    void thread_in_r_address0();
    void thread_in_r_ce0();
    void thread_mul_ln22_fu_148_p0();
    void thread_mul_ln22_fu_148_p1();
    void thread_mul_ln22_fu_148_p2();
    void thread_out_r_address0();
    void thread_out_r_ce0();
    void thread_out_r_d0();
    void thread_out_r_we0();
    void thread_res_fu_115_p0();
    void thread_res_fu_115_p1();
    void thread_res_fu_115_p2();
    void thread_sext_ln22_1_fu_127_p1();
    void thread_sext_ln22_fu_107_p1();
    void thread_sext_ln31_fu_111_p1();
    void thread_zext_ln17_fu_143_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
