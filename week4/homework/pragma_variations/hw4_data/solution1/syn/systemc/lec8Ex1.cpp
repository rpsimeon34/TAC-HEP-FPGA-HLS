// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "lec8Ex1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<6> lec8Ex1::ap_const_lv6_0 = "000000";
const sc_logic lec8Ex1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<32> lec8Ex1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic lec8Ex1::ap_const_logic_1 = sc_dt::Log_1;

lec8Ex1::lec8Ex1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Loop_for_Loop_proc_U0 = new Loop_for_Loop_proc("Loop_for_Loop_proc_U0");
    Loop_for_Loop_proc_U0->ap_clk(ap_clk);
    Loop_for_Loop_proc_U0->ap_rst(ap_rst);
    Loop_for_Loop_proc_U0->ap_start(Loop_for_Loop_proc_U0_ap_start);
    Loop_for_Loop_proc_U0->ap_done(Loop_for_Loop_proc_U0_ap_done);
    Loop_for_Loop_proc_U0->ap_continue(Loop_for_Loop_proc_U0_ap_continue);
    Loop_for_Loop_proc_U0->ap_idle(Loop_for_Loop_proc_U0_ap_idle);
    Loop_for_Loop_proc_U0->ap_ready(Loop_for_Loop_proc_U0_ap_ready);
    Loop_for_Loop_proc_U0->a(a);
    Loop_for_Loop_proc_U0->b(b);
    Loop_for_Loop_proc_U0->in_r_address0(Loop_for_Loop_proc_U0_in_r_address0);
    Loop_for_Loop_proc_U0->in_r_ce0(Loop_for_Loop_proc_U0_in_r_ce0);
    Loop_for_Loop_proc_U0->in_r_q0(in_r_q0);
    Loop_for_Loop_proc_U0->c(c);
    Loop_for_Loop_proc_U0->out_r_address0(Loop_for_Loop_proc_U0_out_r_address0);
    Loop_for_Loop_proc_U0->out_r_ce0(Loop_for_Loop_proc_U0_out_r_ce0);
    Loop_for_Loop_proc_U0->out_r_we0(Loop_for_Loop_proc_U0_out_r_we0);
    Loop_for_Loop_proc_U0->out_r_d0(Loop_for_Loop_proc_U0_out_r_d0);

    SC_METHOD(thread_Loop_for_Loop_proc_U0_ap_continue);

    SC_METHOD(thread_Loop_for_Loop_proc_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_Loop_for_Loop_proc_U0_start_full_n);

    SC_METHOD(thread_Loop_for_Loop_proc_U0_start_write);

    SC_METHOD(thread_ap_done);
    sensitive << ( Loop_for_Loop_proc_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Loop_for_Loop_proc_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( Loop_for_Loop_proc_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( Loop_for_Loop_proc_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( Loop_for_Loop_proc_U0_ap_ready );

    SC_METHOD(thread_in_r_address0);
    sensitive << ( Loop_for_Loop_proc_U0_in_r_address0 );

    SC_METHOD(thread_in_r_address1);

    SC_METHOD(thread_in_r_ce0);
    sensitive << ( Loop_for_Loop_proc_U0_in_r_ce0 );

    SC_METHOD(thread_in_r_ce1);

    SC_METHOD(thread_in_r_d0);

    SC_METHOD(thread_in_r_d1);

    SC_METHOD(thread_in_r_we0);

    SC_METHOD(thread_in_r_we1);

    SC_METHOD(thread_out_r_address0);
    sensitive << ( Loop_for_Loop_proc_U0_out_r_address0 );

    SC_METHOD(thread_out_r_address1);

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( Loop_for_Loop_proc_U0_out_r_ce0 );

    SC_METHOD(thread_out_r_ce1);

    SC_METHOD(thread_out_r_d0);
    sensitive << ( Loop_for_Loop_proc_U0_out_r_d0 );

    SC_METHOD(thread_out_r_d1);

    SC_METHOD(thread_out_r_we0);
    sensitive << ( Loop_for_Loop_proc_U0_out_r_we0 );

    SC_METHOD(thread_out_r_we1);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "lec8Ex1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, in_r_address0, "(port)in_r_address0");
    sc_trace(mVcdFile, in_r_ce0, "(port)in_r_ce0");
    sc_trace(mVcdFile, in_r_d0, "(port)in_r_d0");
    sc_trace(mVcdFile, in_r_q0, "(port)in_r_q0");
    sc_trace(mVcdFile, in_r_we0, "(port)in_r_we0");
    sc_trace(mVcdFile, in_r_address1, "(port)in_r_address1");
    sc_trace(mVcdFile, in_r_ce1, "(port)in_r_ce1");
    sc_trace(mVcdFile, in_r_d1, "(port)in_r_d1");
    sc_trace(mVcdFile, in_r_q1, "(port)in_r_q1");
    sc_trace(mVcdFile, in_r_we1, "(port)in_r_we1");
    sc_trace(mVcdFile, a, "(port)a");
    sc_trace(mVcdFile, b, "(port)b");
    sc_trace(mVcdFile, c, "(port)c");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
    sc_trace(mVcdFile, out_r_q0, "(port)out_r_q0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_address1, "(port)out_r_address1");
    sc_trace(mVcdFile, out_r_ce1, "(port)out_r_ce1");
    sc_trace(mVcdFile, out_r_d1, "(port)out_r_d1");
    sc_trace(mVcdFile, out_r_q1, "(port)out_r_q1");
    sc_trace(mVcdFile, out_r_we1, "(port)out_r_we1");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, Loop_for_Loop_proc_U0_ap_start, "Loop_for_Loop_proc_U0_ap_start");
    sc_trace(mVcdFile, Loop_for_Loop_proc_U0_ap_done, "Loop_for_Loop_proc_U0_ap_done");
    sc_trace(mVcdFile, Loop_for_Loop_proc_U0_ap_continue, "Loop_for_Loop_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loop_for_Loop_proc_U0_ap_idle, "Loop_for_Loop_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loop_for_Loop_proc_U0_ap_ready, "Loop_for_Loop_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_for_Loop_proc_U0_in_r_address0, "Loop_for_Loop_proc_U0_in_r_address0");
    sc_trace(mVcdFile, Loop_for_Loop_proc_U0_in_r_ce0, "Loop_for_Loop_proc_U0_in_r_ce0");
    sc_trace(mVcdFile, Loop_for_Loop_proc_U0_out_r_address0, "Loop_for_Loop_proc_U0_out_r_address0");
    sc_trace(mVcdFile, Loop_for_Loop_proc_U0_out_r_ce0, "Loop_for_Loop_proc_U0_out_r_ce0");
    sc_trace(mVcdFile, Loop_for_Loop_proc_U0_out_r_we0, "Loop_for_Loop_proc_U0_out_r_we0");
    sc_trace(mVcdFile, Loop_for_Loop_proc_U0_out_r_d0, "Loop_for_Loop_proc_U0_out_r_d0");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, Loop_for_Loop_proc_U0_start_full_n, "Loop_for_Loop_proc_U0_start_full_n");
    sc_trace(mVcdFile, Loop_for_Loop_proc_U0_start_write, "Loop_for_Loop_proc_U0_start_write");
#endif

    }
    mHdltvinHandle.open("lec8Ex1.hdltvin.dat");
    mHdltvoutHandle.open("lec8Ex1.hdltvout.dat");
}

lec8Ex1::~lec8Ex1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Loop_for_Loop_proc_U0;
}

void lec8Ex1::thread_Loop_for_Loop_proc_U0_ap_continue() {
    Loop_for_Loop_proc_U0_ap_continue = ap_const_logic_1;
}

void lec8Ex1::thread_Loop_for_Loop_proc_U0_ap_start() {
    Loop_for_Loop_proc_U0_ap_start = ap_start.read();
}

void lec8Ex1::thread_Loop_for_Loop_proc_U0_start_full_n() {
    Loop_for_Loop_proc_U0_start_full_n = ap_const_logic_1;
}

void lec8Ex1::thread_Loop_for_Loop_proc_U0_start_write() {
    Loop_for_Loop_proc_U0_start_write = ap_const_logic_0;
}

void lec8Ex1::thread_ap_done() {
    ap_done = Loop_for_Loop_proc_U0_ap_done.read();
}

void lec8Ex1::thread_ap_idle() {
    ap_idle = Loop_for_Loop_proc_U0_ap_idle.read();
}

void lec8Ex1::thread_ap_ready() {
    ap_ready = Loop_for_Loop_proc_U0_ap_ready.read();
}

void lec8Ex1::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void lec8Ex1::thread_ap_sync_done() {
    ap_sync_done = Loop_for_Loop_proc_U0_ap_done.read();
}

void lec8Ex1::thread_ap_sync_ready() {
    ap_sync_ready = Loop_for_Loop_proc_U0_ap_ready.read();
}

void lec8Ex1::thread_in_r_address0() {
    in_r_address0 = Loop_for_Loop_proc_U0_in_r_address0.read();
}

void lec8Ex1::thread_in_r_address1() {
    in_r_address1 = ap_const_lv6_0;
}

void lec8Ex1::thread_in_r_ce0() {
    in_r_ce0 = Loop_for_Loop_proc_U0_in_r_ce0.read();
}

void lec8Ex1::thread_in_r_ce1() {
    in_r_ce1 = ap_const_logic_0;
}

void lec8Ex1::thread_in_r_d0() {
    in_r_d0 = ap_const_lv32_0;
}

void lec8Ex1::thread_in_r_d1() {
    in_r_d1 = ap_const_lv32_0;
}

void lec8Ex1::thread_in_r_we0() {
    in_r_we0 = ap_const_logic_0;
}

void lec8Ex1::thread_in_r_we1() {
    in_r_we1 = ap_const_logic_0;
}

void lec8Ex1::thread_out_r_address0() {
    out_r_address0 = Loop_for_Loop_proc_U0_out_r_address0.read();
}

void lec8Ex1::thread_out_r_address1() {
    out_r_address1 = ap_const_lv6_0;
}

void lec8Ex1::thread_out_r_ce0() {
    out_r_ce0 = Loop_for_Loop_proc_U0_out_r_ce0.read();
}

void lec8Ex1::thread_out_r_ce1() {
    out_r_ce1 = ap_const_logic_0;
}

void lec8Ex1::thread_out_r_d0() {
    out_r_d0 = Loop_for_Loop_proc_U0_out_r_d0.read();
}

void lec8Ex1::thread_out_r_d1() {
    out_r_d1 = ap_const_lv32_0;
}

void lec8Ex1::thread_out_r_we0() {
    out_r_we0 = Loop_for_Loop_proc_U0_out_r_we0.read();
}

void lec8Ex1::thread_out_r_we1() {
    out_r_we1 = ap_const_logic_0;
}

void lec8Ex1::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvoutHandle << mComma << "{"  <<  " \"in_r_address0\" :  \"" << in_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_ce0\" :  \"" << in_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_d0\" :  \"" << in_r_d0.read() << "\" ";
        mHdltvinHandle << mComma << "{"  <<  " \"in_r_q0\" :  \"" << in_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_we0\" :  \"" << in_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_address1\" :  \"" << in_r_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_ce1\" :  \"" << in_r_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_d1\" :  \"" << in_r_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_q1\" :  \"" << in_r_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"in_r_we1\" :  \"" << in_r_we1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a\" :  \"" << a.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b\" :  \"" << b.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c\" :  \"" << c.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address0\" :  \"" << out_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce0\" :  \"" << out_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d0\" :  \"" << out_r_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_r_q0\" :  \"" << out_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we0\" :  \"" << out_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address1\" :  \"" << out_r_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce1\" :  \"" << out_r_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d1\" :  \"" << out_r_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_r_q1\" :  \"" << out_r_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we1\" :  \"" << out_r_we1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

