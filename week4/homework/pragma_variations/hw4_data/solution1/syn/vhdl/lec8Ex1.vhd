-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lec8Ex1 is
port (
    in_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_we0 : OUT STD_LOGIC;
    in_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    in_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_r_we1 : OUT STD_LOGIC;
    a : IN STD_LOGIC_VECTOR (15 downto 0);
    b : IN STD_LOGIC_VECTOR (15 downto 0);
    c : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_we0 : OUT STD_LOGIC;
    out_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    out_r_ce1 : OUT STD_LOGIC;
    out_r_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_we1 : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of lec8Ex1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lec8Ex1,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.756000,HLS_SYN_LAT=63,HLS_SYN_TPT=64,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=155,HLS_SYN_LUT=215,HLS_VERSION=2020_1}";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';

    signal Loop_for_Loop_proc_U0_ap_start : STD_LOGIC;
    signal Loop_for_Loop_proc_U0_ap_done : STD_LOGIC;
    signal Loop_for_Loop_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_for_Loop_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_for_Loop_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_for_Loop_proc_U0_in_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Loop_for_Loop_proc_U0_in_r_ce0 : STD_LOGIC;
    signal Loop_for_Loop_proc_U0_out_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal Loop_for_Loop_proc_U0_out_r_ce0 : STD_LOGIC;
    signal Loop_for_Loop_proc_U0_out_r_we0 : STD_LOGIC;
    signal Loop_for_Loop_proc_U0_out_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal Loop_for_Loop_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_for_Loop_proc_U0_start_write : STD_LOGIC;

    component Loop_for_Loop_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (15 downto 0);
        b : IN STD_LOGIC_VECTOR (15 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        c : IN STD_LOGIC_VECTOR (31 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Loop_for_Loop_proc_U0 : component Loop_for_Loop_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_for_Loop_proc_U0_ap_start,
        ap_done => Loop_for_Loop_proc_U0_ap_done,
        ap_continue => Loop_for_Loop_proc_U0_ap_continue,
        ap_idle => Loop_for_Loop_proc_U0_ap_idle,
        ap_ready => Loop_for_Loop_proc_U0_ap_ready,
        a => a,
        b => b,
        in_r_address0 => Loop_for_Loop_proc_U0_in_r_address0,
        in_r_ce0 => Loop_for_Loop_proc_U0_in_r_ce0,
        in_r_q0 => in_r_q0,
        c => c,
        out_r_address0 => Loop_for_Loop_proc_U0_out_r_address0,
        out_r_ce0 => Loop_for_Loop_proc_U0_out_r_ce0,
        out_r_we0 => Loop_for_Loop_proc_U0_out_r_we0,
        out_r_d0 => Loop_for_Loop_proc_U0_out_r_d0);




    Loop_for_Loop_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_for_Loop_proc_U0_ap_start <= ap_start;
    Loop_for_Loop_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_for_Loop_proc_U0_start_write <= ap_const_logic_0;
    ap_done <= Loop_for_Loop_proc_U0_ap_done;
    ap_idle <= Loop_for_Loop_proc_U0_ap_idle;
    ap_ready <= Loop_for_Loop_proc_U0_ap_ready;
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_for_Loop_proc_U0_ap_done;
    ap_sync_ready <= Loop_for_Loop_proc_U0_ap_ready;
    in_r_address0 <= Loop_for_Loop_proc_U0_in_r_address0;
    in_r_address1 <= ap_const_lv6_0;
    in_r_ce0 <= Loop_for_Loop_proc_U0_in_r_ce0;
    in_r_ce1 <= ap_const_logic_0;
    in_r_d0 <= ap_const_lv32_0;
    in_r_d1 <= ap_const_lv32_0;
    in_r_we0 <= ap_const_logic_0;
    in_r_we1 <= ap_const_logic_0;
    out_r_address0 <= Loop_for_Loop_proc_U0_out_r_address0;
    out_r_address1 <= ap_const_lv6_0;
    out_r_ce0 <= Loop_for_Loop_proc_U0_out_r_ce0;
    out_r_ce1 <= ap_const_logic_0;
    out_r_d0 <= Loop_for_Loop_proc_U0_out_r_d0;
    out_r_d1 <= ap_const_lv32_0;
    out_r_we0 <= Loop_for_Loop_proc_U0_out_r_we0;
    out_r_we1 <= ap_const_logic_0;
end behav;
