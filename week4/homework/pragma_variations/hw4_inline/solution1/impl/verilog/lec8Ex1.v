// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lec8Ex1,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.756000,HLS_SYN_LAT=181,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=150,HLS_SYN_LUT=186,HLS_VERSION=2020_1}" *)

module lec8Ex1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_r_address0,
        in_r_ce0,
        in_r_q0,
        a,
        b,
        c,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] in_r_address0;
output   in_r_ce0;
input  [31:0] in_r_q0;
input  [15:0] a;
input  [15:0] b;
input  [31:0] c;
output  [5:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [31:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg in_r_ce0;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] sext_ln21_fu_93_p1;
reg  signed [31:0] sext_ln21_reg_149;
wire   [31:0] res_fu_101_p2;
reg   [31:0] res_reg_154;
wire  signed [31:0] sext_ln21_1_fu_113_p1;
reg  signed [31:0] sext_ln21_1_reg_159;
wire   [5:0] i_fu_123_p2;
reg   [5:0] i_reg_167;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln16_fu_129_p1;
reg   [63:0] zext_ln16_reg_172;
wire   [0:0] icmp_ln14_fu_117_p2;
wire   [31:0] mul_ln21_fu_134_p2;
reg   [31:0] mul_ln21_reg_182;
wire    ap_CS_fsm_state3;
reg   [5:0] i_0_reg_82;
wire    ap_CS_fsm_state4;
wire  signed [31:0] res_fu_101_p0;
wire  signed [31:0] res_fu_101_p1;
wire  signed [16:0] sext_ln31_fu_97_p1;
wire   [16:0] add_ln21_1_fu_107_p2;
wire  signed [31:0] mul_ln21_fu_134_p0;
wire  signed [15:0] mul_ln21_fu_134_p1;
wire   [31:0] add_ln21_fu_139_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_reg_82 <= i_reg_167;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_82 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_167 <= i_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        mul_ln21_reg_182 <= mul_ln21_fu_134_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        res_reg_154 <= res_fu_101_p2;
        sext_ln21_1_reg_159 <= sext_ln21_1_fu_113_p1;
        sext_ln21_reg_149 <= sext_ln21_fu_93_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_117_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln16_reg_172[5 : 0] <= zext_ln16_fu_129_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln14_fu_117_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_1_fu_107_p2 = ($signed(sext_ln31_fu_97_p1) + $signed(17'd39));

assign add_ln21_fu_139_p2 = (res_reg_154 + mul_ln21_reg_182);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign i_fu_123_p2 = (i_0_reg_82 + 6'd1);

assign icmp_ln14_fu_117_p2 = ((i_0_reg_82 == 6'd60) ? 1'b1 : 1'b0);

assign in_r_address0 = zext_ln16_fu_129_p1;

assign mul_ln21_fu_134_p0 = in_r_q0;

assign mul_ln21_fu_134_p1 = sext_ln21_reg_149;

assign mul_ln21_fu_134_p2 = ($signed(mul_ln21_fu_134_p0) * $signed(mul_ln21_fu_134_p1));

assign out_r_address0 = zext_ln16_reg_172;

assign out_r_d0 = ($signed(sext_ln21_1_reg_159) + $signed(add_ln21_fu_139_p2));

assign res_fu_101_p0 = c;

assign res_fu_101_p1 = c;

assign res_fu_101_p2 = ($signed(res_fu_101_p0) * $signed(res_fu_101_p1));

assign sext_ln21_1_fu_113_p1 = $signed(add_ln21_1_fu_107_p2);

assign sext_ln21_fu_93_p1 = $signed(a);

assign sext_ln31_fu_97_p1 = $signed(b);

assign zext_ln16_fu_129_p1 = i_0_reg_82;

always @ (posedge ap_clk) begin
    zext_ln16_reg_172[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //lec8Ex1
