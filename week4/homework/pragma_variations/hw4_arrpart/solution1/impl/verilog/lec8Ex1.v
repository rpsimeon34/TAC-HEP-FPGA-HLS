// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="lec8Ex1,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.049667,HLS_SYN_LAT=121,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=143,HLS_SYN_LUT=439,HLS_VERSION=2020_1}" *)

module lec8Ex1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_0,
        in_1,
        in_2,
        in_3,
        in_4,
        in_5,
        in_6,
        in_7,
        in_8,
        in_9,
        in_10,
        in_11,
        in_12,
        in_13,
        in_14,
        in_15,
        in_16,
        in_17,
        in_18,
        in_19,
        in_20,
        in_21,
        in_22,
        in_23,
        in_24,
        in_25,
        in_26,
        in_27,
        in_28,
        in_29,
        in_30,
        in_31,
        in_32,
        in_33,
        in_34,
        in_35,
        in_36,
        in_37,
        in_38,
        in_39,
        in_40,
        in_41,
        in_42,
        in_43,
        in_44,
        in_45,
        in_46,
        in_47,
        in_48,
        in_49,
        in_50,
        in_51,
        in_52,
        in_53,
        in_54,
        in_55,
        in_56,
        in_57,
        in_58,
        in_59,
        a,
        b,
        c,
        out_0,
        out_0_ap_vld,
        out_1,
        out_1_ap_vld,
        out_2,
        out_2_ap_vld,
        out_3,
        out_3_ap_vld,
        out_4,
        out_4_ap_vld,
        out_5,
        out_5_ap_vld,
        out_6,
        out_6_ap_vld,
        out_7,
        out_7_ap_vld,
        out_8,
        out_8_ap_vld,
        out_9,
        out_9_ap_vld,
        out_10,
        out_10_ap_vld,
        out_11,
        out_11_ap_vld,
        out_12,
        out_12_ap_vld,
        out_13,
        out_13_ap_vld,
        out_14,
        out_14_ap_vld,
        out_15,
        out_15_ap_vld,
        out_16,
        out_16_ap_vld,
        out_17,
        out_17_ap_vld,
        out_18,
        out_18_ap_vld,
        out_19,
        out_19_ap_vld,
        out_20,
        out_20_ap_vld,
        out_21,
        out_21_ap_vld,
        out_22,
        out_22_ap_vld,
        out_23,
        out_23_ap_vld,
        out_24,
        out_24_ap_vld,
        out_25,
        out_25_ap_vld,
        out_26,
        out_26_ap_vld,
        out_27,
        out_27_ap_vld,
        out_28,
        out_28_ap_vld,
        out_29,
        out_29_ap_vld,
        out_30,
        out_30_ap_vld,
        out_31,
        out_31_ap_vld,
        out_32,
        out_32_ap_vld,
        out_33,
        out_33_ap_vld,
        out_34,
        out_34_ap_vld,
        out_35,
        out_35_ap_vld,
        out_36,
        out_36_ap_vld,
        out_37,
        out_37_ap_vld,
        out_38,
        out_38_ap_vld,
        out_39,
        out_39_ap_vld,
        out_40,
        out_40_ap_vld,
        out_41,
        out_41_ap_vld,
        out_42,
        out_42_ap_vld,
        out_43,
        out_43_ap_vld,
        out_44,
        out_44_ap_vld,
        out_45,
        out_45_ap_vld,
        out_46,
        out_46_ap_vld,
        out_47,
        out_47_ap_vld,
        out_48,
        out_48_ap_vld,
        out_49,
        out_49_ap_vld,
        out_50,
        out_50_ap_vld,
        out_51,
        out_51_ap_vld,
        out_52,
        out_52_ap_vld,
        out_53,
        out_53_ap_vld,
        out_54,
        out_54_ap_vld,
        out_55,
        out_55_ap_vld,
        out_56,
        out_56_ap_vld,
        out_57,
        out_57_ap_vld,
        out_58,
        out_58_ap_vld,
        out_59,
        out_59_ap_vld
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] in_0;
input  [31:0] in_1;
input  [31:0] in_2;
input  [31:0] in_3;
input  [31:0] in_4;
input  [31:0] in_5;
input  [31:0] in_6;
input  [31:0] in_7;
input  [31:0] in_8;
input  [31:0] in_9;
input  [31:0] in_10;
input  [31:0] in_11;
input  [31:0] in_12;
input  [31:0] in_13;
input  [31:0] in_14;
input  [31:0] in_15;
input  [31:0] in_16;
input  [31:0] in_17;
input  [31:0] in_18;
input  [31:0] in_19;
input  [31:0] in_20;
input  [31:0] in_21;
input  [31:0] in_22;
input  [31:0] in_23;
input  [31:0] in_24;
input  [31:0] in_25;
input  [31:0] in_26;
input  [31:0] in_27;
input  [31:0] in_28;
input  [31:0] in_29;
input  [31:0] in_30;
input  [31:0] in_31;
input  [31:0] in_32;
input  [31:0] in_33;
input  [31:0] in_34;
input  [31:0] in_35;
input  [31:0] in_36;
input  [31:0] in_37;
input  [31:0] in_38;
input  [31:0] in_39;
input  [31:0] in_40;
input  [31:0] in_41;
input  [31:0] in_42;
input  [31:0] in_43;
input  [31:0] in_44;
input  [31:0] in_45;
input  [31:0] in_46;
input  [31:0] in_47;
input  [31:0] in_48;
input  [31:0] in_49;
input  [31:0] in_50;
input  [31:0] in_51;
input  [31:0] in_52;
input  [31:0] in_53;
input  [31:0] in_54;
input  [31:0] in_55;
input  [31:0] in_56;
input  [31:0] in_57;
input  [31:0] in_58;
input  [31:0] in_59;
input  [15:0] a;
input  [15:0] b;
input  [31:0] c;
output  [31:0] out_0;
output   out_0_ap_vld;
output  [31:0] out_1;
output   out_1_ap_vld;
output  [31:0] out_2;
output   out_2_ap_vld;
output  [31:0] out_3;
output   out_3_ap_vld;
output  [31:0] out_4;
output   out_4_ap_vld;
output  [31:0] out_5;
output   out_5_ap_vld;
output  [31:0] out_6;
output   out_6_ap_vld;
output  [31:0] out_7;
output   out_7_ap_vld;
output  [31:0] out_8;
output   out_8_ap_vld;
output  [31:0] out_9;
output   out_9_ap_vld;
output  [31:0] out_10;
output   out_10_ap_vld;
output  [31:0] out_11;
output   out_11_ap_vld;
output  [31:0] out_12;
output   out_12_ap_vld;
output  [31:0] out_13;
output   out_13_ap_vld;
output  [31:0] out_14;
output   out_14_ap_vld;
output  [31:0] out_15;
output   out_15_ap_vld;
output  [31:0] out_16;
output   out_16_ap_vld;
output  [31:0] out_17;
output   out_17_ap_vld;
output  [31:0] out_18;
output   out_18_ap_vld;
output  [31:0] out_19;
output   out_19_ap_vld;
output  [31:0] out_20;
output   out_20_ap_vld;
output  [31:0] out_21;
output   out_21_ap_vld;
output  [31:0] out_22;
output   out_22_ap_vld;
output  [31:0] out_23;
output   out_23_ap_vld;
output  [31:0] out_24;
output   out_24_ap_vld;
output  [31:0] out_25;
output   out_25_ap_vld;
output  [31:0] out_26;
output   out_26_ap_vld;
output  [31:0] out_27;
output   out_27_ap_vld;
output  [31:0] out_28;
output   out_28_ap_vld;
output  [31:0] out_29;
output   out_29_ap_vld;
output  [31:0] out_30;
output   out_30_ap_vld;
output  [31:0] out_31;
output   out_31_ap_vld;
output  [31:0] out_32;
output   out_32_ap_vld;
output  [31:0] out_33;
output   out_33_ap_vld;
output  [31:0] out_34;
output   out_34_ap_vld;
output  [31:0] out_35;
output   out_35_ap_vld;
output  [31:0] out_36;
output   out_36_ap_vld;
output  [31:0] out_37;
output   out_37_ap_vld;
output  [31:0] out_38;
output   out_38_ap_vld;
output  [31:0] out_39;
output   out_39_ap_vld;
output  [31:0] out_40;
output   out_40_ap_vld;
output  [31:0] out_41;
output   out_41_ap_vld;
output  [31:0] out_42;
output   out_42_ap_vld;
output  [31:0] out_43;
output   out_43_ap_vld;
output  [31:0] out_44;
output   out_44_ap_vld;
output  [31:0] out_45;
output   out_45_ap_vld;
output  [31:0] out_46;
output   out_46_ap_vld;
output  [31:0] out_47;
output   out_47_ap_vld;
output  [31:0] out_48;
output   out_48_ap_vld;
output  [31:0] out_49;
output   out_49_ap_vld;
output  [31:0] out_50;
output   out_50_ap_vld;
output  [31:0] out_51;
output   out_51_ap_vld;
output  [31:0] out_52;
output   out_52_ap_vld;
output  [31:0] out_53;
output   out_53_ap_vld;
output  [31:0] out_54;
output   out_54_ap_vld;
output  [31:0] out_55;
output   out_55_ap_vld;
output  [31:0] out_56;
output   out_56_ap_vld;
output  [31:0] out_57;
output   out_57_ap_vld;
output  [31:0] out_58;
output   out_58_ap_vld;
output  [31:0] out_59;
output   out_59_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_0_ap_vld;
reg out_1_ap_vld;
reg out_2_ap_vld;
reg out_3_ap_vld;
reg out_4_ap_vld;
reg out_5_ap_vld;
reg out_6_ap_vld;
reg out_7_ap_vld;
reg out_8_ap_vld;
reg out_9_ap_vld;
reg out_10_ap_vld;
reg out_11_ap_vld;
reg out_12_ap_vld;
reg out_13_ap_vld;
reg out_14_ap_vld;
reg out_15_ap_vld;
reg out_16_ap_vld;
reg out_17_ap_vld;
reg out_18_ap_vld;
reg out_19_ap_vld;
reg out_20_ap_vld;
reg out_21_ap_vld;
reg out_22_ap_vld;
reg out_23_ap_vld;
reg out_24_ap_vld;
reg out_25_ap_vld;
reg out_26_ap_vld;
reg out_27_ap_vld;
reg out_28_ap_vld;
reg out_29_ap_vld;
reg out_30_ap_vld;
reg out_31_ap_vld;
reg out_32_ap_vld;
reg out_33_ap_vld;
reg out_34_ap_vld;
reg out_35_ap_vld;
reg out_36_ap_vld;
reg out_37_ap_vld;
reg out_38_ap_vld;
reg out_39_ap_vld;
reg out_40_ap_vld;
reg out_41_ap_vld;
reg out_42_ap_vld;
reg out_43_ap_vld;
reg out_44_ap_vld;
reg out_45_ap_vld;
reg out_46_ap_vld;
reg out_47_ap_vld;
reg out_48_ap_vld;
reg out_49_ap_vld;
reg out_50_ap_vld;
reg out_51_ap_vld;
reg out_52_ap_vld;
reg out_53_ap_vld;
reg out_54_ap_vld;
reg out_55_ap_vld;
reg out_56_ap_vld;
reg out_57_ap_vld;
reg out_58_ap_vld;
reg out_59_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire  signed [31:0] sext_ln24_fu_1202_p1;
reg  signed [31:0] sext_ln24_reg_1438;
wire   [31:0] res_fu_1210_p2;
reg   [31:0] res_reg_1443;
wire  signed [31:0] sext_ln24_1_fu_1222_p1;
reg  signed [31:0] sext_ln24_1_reg_1448;
wire   [5:0] i_fu_1232_p2;
reg   [5:0] i_reg_1456;
wire    ap_CS_fsm_state2;
wire   [31:0] mul_ln24_fu_1364_p2;
reg   [31:0] mul_ln24_reg_1461;
wire   [0:0] icmp_ln17_fu_1226_p2;
reg   [5:0] i_0_reg_1190;
wire    ap_CS_fsm_state3;
wire   [31:0] y_fu_1373_p2;
wire  signed [31:0] res_fu_1210_p0;
wire  signed [31:0] res_fu_1210_p1;
wire  signed [16:0] sext_ln34_fu_1206_p1;
wire   [16:0] add_ln24_1_fu_1216_p2;
wire  signed [31:0] x_fu_1238_p62;
wire  signed [15:0] mul_ln24_fu_1364_p1;
wire   [31:0] add_ln24_fu_1369_p2;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

lec8Ex1_mux_606_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 32 ),
    .din6_WIDTH( 32 ),
    .din7_WIDTH( 32 ),
    .din8_WIDTH( 32 ),
    .din9_WIDTH( 32 ),
    .din10_WIDTH( 32 ),
    .din11_WIDTH( 32 ),
    .din12_WIDTH( 32 ),
    .din13_WIDTH( 32 ),
    .din14_WIDTH( 32 ),
    .din15_WIDTH( 32 ),
    .din16_WIDTH( 32 ),
    .din17_WIDTH( 32 ),
    .din18_WIDTH( 32 ),
    .din19_WIDTH( 32 ),
    .din20_WIDTH( 32 ),
    .din21_WIDTH( 32 ),
    .din22_WIDTH( 32 ),
    .din23_WIDTH( 32 ),
    .din24_WIDTH( 32 ),
    .din25_WIDTH( 32 ),
    .din26_WIDTH( 32 ),
    .din27_WIDTH( 32 ),
    .din28_WIDTH( 32 ),
    .din29_WIDTH( 32 ),
    .din30_WIDTH( 32 ),
    .din31_WIDTH( 32 ),
    .din32_WIDTH( 32 ),
    .din33_WIDTH( 32 ),
    .din34_WIDTH( 32 ),
    .din35_WIDTH( 32 ),
    .din36_WIDTH( 32 ),
    .din37_WIDTH( 32 ),
    .din38_WIDTH( 32 ),
    .din39_WIDTH( 32 ),
    .din40_WIDTH( 32 ),
    .din41_WIDTH( 32 ),
    .din42_WIDTH( 32 ),
    .din43_WIDTH( 32 ),
    .din44_WIDTH( 32 ),
    .din45_WIDTH( 32 ),
    .din46_WIDTH( 32 ),
    .din47_WIDTH( 32 ),
    .din48_WIDTH( 32 ),
    .din49_WIDTH( 32 ),
    .din50_WIDTH( 32 ),
    .din51_WIDTH( 32 ),
    .din52_WIDTH( 32 ),
    .din53_WIDTH( 32 ),
    .din54_WIDTH( 32 ),
    .din55_WIDTH( 32 ),
    .din56_WIDTH( 32 ),
    .din57_WIDTH( 32 ),
    .din58_WIDTH( 32 ),
    .din59_WIDTH( 32 ),
    .din60_WIDTH( 6 ),
    .dout_WIDTH( 32 ))
lec8Ex1_mux_606_3bkb_U1(
    .din0(in_0),
    .din1(in_1),
    .din2(in_2),
    .din3(in_3),
    .din4(in_4),
    .din5(in_5),
    .din6(in_6),
    .din7(in_7),
    .din8(in_8),
    .din9(in_9),
    .din10(in_10),
    .din11(in_11),
    .din12(in_12),
    .din13(in_13),
    .din14(in_14),
    .din15(in_15),
    .din16(in_16),
    .din17(in_17),
    .din18(in_18),
    .din19(in_19),
    .din20(in_20),
    .din21(in_21),
    .din22(in_22),
    .din23(in_23),
    .din24(in_24),
    .din25(in_25),
    .din26(in_26),
    .din27(in_27),
    .din28(in_28),
    .din29(in_29),
    .din30(in_30),
    .din31(in_31),
    .din32(in_32),
    .din33(in_33),
    .din34(in_34),
    .din35(in_35),
    .din36(in_36),
    .din37(in_37),
    .din38(in_38),
    .din39(in_39),
    .din40(in_40),
    .din41(in_41),
    .din42(in_42),
    .din43(in_43),
    .din44(in_44),
    .din45(in_45),
    .din46(in_46),
    .din47(in_47),
    .din48(in_48),
    .din49(in_49),
    .din50(in_50),
    .din51(in_51),
    .din52(in_52),
    .din53(in_53),
    .din54(in_54),
    .din55(in_55),
    .din56(in_56),
    .din57(in_57),
    .din58(in_58),
    .din59(in_59),
    .din60(i_0_reg_1190),
    .dout(x_fu_1238_p62)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_1190 <= i_reg_1456;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_1190 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_1456 <= i_fu_1232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln17_fu_1226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mul_ln24_reg_1461 <= mul_ln24_fu_1364_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        res_reg_1443 <= res_fu_1210_p2;
        sext_ln24_1_reg_1448 <= sext_ln24_1_fu_1222_p1;
        sext_ln24_reg_1438 <= sext_ln24_fu_1202_p1;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_1226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln17_fu_1226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        out_0_ap_vld = 1'b1;
    end else begin
        out_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd10) & (1'b1 == ap_CS_fsm_state3))) begin
        out_10_ap_vld = 1'b1;
    end else begin
        out_10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd11) & (1'b1 == ap_CS_fsm_state3))) begin
        out_11_ap_vld = 1'b1;
    end else begin
        out_11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd12) & (1'b1 == ap_CS_fsm_state3))) begin
        out_12_ap_vld = 1'b1;
    end else begin
        out_12_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd13) & (1'b1 == ap_CS_fsm_state3))) begin
        out_13_ap_vld = 1'b1;
    end else begin
        out_13_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd14) & (1'b1 == ap_CS_fsm_state3))) begin
        out_14_ap_vld = 1'b1;
    end else begin
        out_14_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd15) & (1'b1 == ap_CS_fsm_state3))) begin
        out_15_ap_vld = 1'b1;
    end else begin
        out_15_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd16) & (1'b1 == ap_CS_fsm_state3))) begin
        out_16_ap_vld = 1'b1;
    end else begin
        out_16_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd17) & (1'b1 == ap_CS_fsm_state3))) begin
        out_17_ap_vld = 1'b1;
    end else begin
        out_17_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd18) & (1'b1 == ap_CS_fsm_state3))) begin
        out_18_ap_vld = 1'b1;
    end else begin
        out_18_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd19) & (1'b1 == ap_CS_fsm_state3))) begin
        out_19_ap_vld = 1'b1;
    end else begin
        out_19_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        out_1_ap_vld = 1'b1;
    end else begin
        out_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd20) & (1'b1 == ap_CS_fsm_state3))) begin
        out_20_ap_vld = 1'b1;
    end else begin
        out_20_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd21) & (1'b1 == ap_CS_fsm_state3))) begin
        out_21_ap_vld = 1'b1;
    end else begin
        out_21_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd22) & (1'b1 == ap_CS_fsm_state3))) begin
        out_22_ap_vld = 1'b1;
    end else begin
        out_22_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd23) & (1'b1 == ap_CS_fsm_state3))) begin
        out_23_ap_vld = 1'b1;
    end else begin
        out_23_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd24) & (1'b1 == ap_CS_fsm_state3))) begin
        out_24_ap_vld = 1'b1;
    end else begin
        out_24_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd25) & (1'b1 == ap_CS_fsm_state3))) begin
        out_25_ap_vld = 1'b1;
    end else begin
        out_25_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd26) & (1'b1 == ap_CS_fsm_state3))) begin
        out_26_ap_vld = 1'b1;
    end else begin
        out_26_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd27) & (1'b1 == ap_CS_fsm_state3))) begin
        out_27_ap_vld = 1'b1;
    end else begin
        out_27_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd28) & (1'b1 == ap_CS_fsm_state3))) begin
        out_28_ap_vld = 1'b1;
    end else begin
        out_28_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd29) & (1'b1 == ap_CS_fsm_state3))) begin
        out_29_ap_vld = 1'b1;
    end else begin
        out_29_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd2) & (1'b1 == ap_CS_fsm_state3))) begin
        out_2_ap_vld = 1'b1;
    end else begin
        out_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd30) & (1'b1 == ap_CS_fsm_state3))) begin
        out_30_ap_vld = 1'b1;
    end else begin
        out_30_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd31) & (1'b1 == ap_CS_fsm_state3))) begin
        out_31_ap_vld = 1'b1;
    end else begin
        out_31_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd32) & (1'b1 == ap_CS_fsm_state3))) begin
        out_32_ap_vld = 1'b1;
    end else begin
        out_32_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd33) & (1'b1 == ap_CS_fsm_state3))) begin
        out_33_ap_vld = 1'b1;
    end else begin
        out_33_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd34) & (1'b1 == ap_CS_fsm_state3))) begin
        out_34_ap_vld = 1'b1;
    end else begin
        out_34_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd35) & (1'b1 == ap_CS_fsm_state3))) begin
        out_35_ap_vld = 1'b1;
    end else begin
        out_35_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd36) & (1'b1 == ap_CS_fsm_state3))) begin
        out_36_ap_vld = 1'b1;
    end else begin
        out_36_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd37) & (1'b1 == ap_CS_fsm_state3))) begin
        out_37_ap_vld = 1'b1;
    end else begin
        out_37_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd38) & (1'b1 == ap_CS_fsm_state3))) begin
        out_38_ap_vld = 1'b1;
    end else begin
        out_38_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd39) & (1'b1 == ap_CS_fsm_state3))) begin
        out_39_ap_vld = 1'b1;
    end else begin
        out_39_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd3) & (1'b1 == ap_CS_fsm_state3))) begin
        out_3_ap_vld = 1'b1;
    end else begin
        out_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd40) & (1'b1 == ap_CS_fsm_state3))) begin
        out_40_ap_vld = 1'b1;
    end else begin
        out_40_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd41) & (1'b1 == ap_CS_fsm_state3))) begin
        out_41_ap_vld = 1'b1;
    end else begin
        out_41_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd42) & (1'b1 == ap_CS_fsm_state3))) begin
        out_42_ap_vld = 1'b1;
    end else begin
        out_42_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd43) & (1'b1 == ap_CS_fsm_state3))) begin
        out_43_ap_vld = 1'b1;
    end else begin
        out_43_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd44) & (1'b1 == ap_CS_fsm_state3))) begin
        out_44_ap_vld = 1'b1;
    end else begin
        out_44_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd45) & (1'b1 == ap_CS_fsm_state3))) begin
        out_45_ap_vld = 1'b1;
    end else begin
        out_45_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd46) & (1'b1 == ap_CS_fsm_state3))) begin
        out_46_ap_vld = 1'b1;
    end else begin
        out_46_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd47) & (1'b1 == ap_CS_fsm_state3))) begin
        out_47_ap_vld = 1'b1;
    end else begin
        out_47_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd48) & (1'b1 == ap_CS_fsm_state3))) begin
        out_48_ap_vld = 1'b1;
    end else begin
        out_48_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd49) & (1'b1 == ap_CS_fsm_state3))) begin
        out_49_ap_vld = 1'b1;
    end else begin
        out_49_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd4) & (1'b1 == ap_CS_fsm_state3))) begin
        out_4_ap_vld = 1'b1;
    end else begin
        out_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd50) & (1'b1 == ap_CS_fsm_state3))) begin
        out_50_ap_vld = 1'b1;
    end else begin
        out_50_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd51) & (1'b1 == ap_CS_fsm_state3))) begin
        out_51_ap_vld = 1'b1;
    end else begin
        out_51_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd52) & (1'b1 == ap_CS_fsm_state3))) begin
        out_52_ap_vld = 1'b1;
    end else begin
        out_52_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd53) & (1'b1 == ap_CS_fsm_state3))) begin
        out_53_ap_vld = 1'b1;
    end else begin
        out_53_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd54) & (1'b1 == ap_CS_fsm_state3))) begin
        out_54_ap_vld = 1'b1;
    end else begin
        out_54_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd55) & (1'b1 == ap_CS_fsm_state3))) begin
        out_55_ap_vld = 1'b1;
    end else begin
        out_55_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd56) & (1'b1 == ap_CS_fsm_state3))) begin
        out_56_ap_vld = 1'b1;
    end else begin
        out_56_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd57) & (1'b1 == ap_CS_fsm_state3))) begin
        out_57_ap_vld = 1'b1;
    end else begin
        out_57_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd58) & (1'b1 == ap_CS_fsm_state3))) begin
        out_58_ap_vld = 1'b1;
    end else begin
        out_58_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & ((i_0_reg_1190 == 6'd59) | ((i_0_reg_1190 == 6'd60) | ((i_0_reg_1190 == 6'd61) | ((i_0_reg_1190 == 6'd62) | (i_0_reg_1190 == 6'd63))))))) begin
        out_59_ap_vld = 1'b1;
    end else begin
        out_59_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd5) & (1'b1 == ap_CS_fsm_state3))) begin
        out_5_ap_vld = 1'b1;
    end else begin
        out_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd6) & (1'b1 == ap_CS_fsm_state3))) begin
        out_6_ap_vld = 1'b1;
    end else begin
        out_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd7) & (1'b1 == ap_CS_fsm_state3))) begin
        out_7_ap_vld = 1'b1;
    end else begin
        out_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd8) & (1'b1 == ap_CS_fsm_state3))) begin
        out_8_ap_vld = 1'b1;
    end else begin
        out_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((i_0_reg_1190 == 6'd9) & (1'b1 == ap_CS_fsm_state3))) begin
        out_9_ap_vld = 1'b1;
    end else begin
        out_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln17_fu_1226_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_1_fu_1216_p2 = ($signed(sext_ln34_fu_1206_p1) + $signed(17'd39));

assign add_ln24_fu_1369_p2 = (res_reg_1443 + mul_ln24_reg_1461);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign i_fu_1232_p2 = (i_0_reg_1190 + 6'd1);

assign icmp_ln17_fu_1226_p2 = ((i_0_reg_1190 == 6'd60) ? 1'b1 : 1'b0);

assign mul_ln24_fu_1364_p1 = sext_ln24_reg_1438;

assign mul_ln24_fu_1364_p2 = ($signed(x_fu_1238_p62) * $signed(mul_ln24_fu_1364_p1));

assign out_0 = y_fu_1373_p2;

assign out_1 = y_fu_1373_p2;

assign out_10 = y_fu_1373_p2;

assign out_11 = y_fu_1373_p2;

assign out_12 = y_fu_1373_p2;

assign out_13 = y_fu_1373_p2;

assign out_14 = y_fu_1373_p2;

assign out_15 = y_fu_1373_p2;

assign out_16 = y_fu_1373_p2;

assign out_17 = y_fu_1373_p2;

assign out_18 = y_fu_1373_p2;

assign out_19 = y_fu_1373_p2;

assign out_2 = y_fu_1373_p2;

assign out_20 = y_fu_1373_p2;

assign out_21 = y_fu_1373_p2;

assign out_22 = y_fu_1373_p2;

assign out_23 = y_fu_1373_p2;

assign out_24 = y_fu_1373_p2;

assign out_25 = y_fu_1373_p2;

assign out_26 = y_fu_1373_p2;

assign out_27 = y_fu_1373_p2;

assign out_28 = y_fu_1373_p2;

assign out_29 = y_fu_1373_p2;

assign out_3 = y_fu_1373_p2;

assign out_30 = y_fu_1373_p2;

assign out_31 = y_fu_1373_p2;

assign out_32 = y_fu_1373_p2;

assign out_33 = y_fu_1373_p2;

assign out_34 = y_fu_1373_p2;

assign out_35 = y_fu_1373_p2;

assign out_36 = y_fu_1373_p2;

assign out_37 = y_fu_1373_p2;

assign out_38 = y_fu_1373_p2;

assign out_39 = y_fu_1373_p2;

assign out_4 = y_fu_1373_p2;

assign out_40 = y_fu_1373_p2;

assign out_41 = y_fu_1373_p2;

assign out_42 = y_fu_1373_p2;

assign out_43 = y_fu_1373_p2;

assign out_44 = y_fu_1373_p2;

assign out_45 = y_fu_1373_p2;

assign out_46 = y_fu_1373_p2;

assign out_47 = y_fu_1373_p2;

assign out_48 = y_fu_1373_p2;

assign out_49 = y_fu_1373_p2;

assign out_5 = y_fu_1373_p2;

assign out_50 = y_fu_1373_p2;

assign out_51 = y_fu_1373_p2;

assign out_52 = y_fu_1373_p2;

assign out_53 = y_fu_1373_p2;

assign out_54 = y_fu_1373_p2;

assign out_55 = y_fu_1373_p2;

assign out_56 = y_fu_1373_p2;

assign out_57 = y_fu_1373_p2;

assign out_58 = y_fu_1373_p2;

assign out_59 = y_fu_1373_p2;

assign out_6 = y_fu_1373_p2;

assign out_7 = y_fu_1373_p2;

assign out_8 = y_fu_1373_p2;

assign out_9 = y_fu_1373_p2;

assign res_fu_1210_p0 = c;

assign res_fu_1210_p1 = c;

assign res_fu_1210_p2 = ($signed(res_fu_1210_p0) * $signed(res_fu_1210_p1));

assign sext_ln24_1_fu_1222_p1 = $signed(add_ln24_1_fu_1216_p2);

assign sext_ln24_fu_1202_p1 = $signed(a);

assign sext_ln34_fu_1206_p1 = $signed(b);

assign y_fu_1373_p2 = ($signed(sext_ln24_1_reg_1448) + $signed(add_ln24_fu_1369_p2));

endmodule //lec8Ex1
