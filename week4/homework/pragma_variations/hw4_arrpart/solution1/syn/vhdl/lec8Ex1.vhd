-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lec8Ex1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_11 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_12 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_13 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_14 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_15 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_16 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_17 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_18 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_19 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_20 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_21 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_22 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_23 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_24 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_25 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_26 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_27 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_28 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_29 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_30 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_31 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_32 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_33 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_34 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_35 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_36 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_37 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_38 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_39 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_40 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_41 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_42 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_43 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_44 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_45 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_46 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_47 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_48 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_49 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_50 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_51 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_52 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_53 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_54 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_55 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_56 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_57 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_58 : IN STD_LOGIC_VECTOR (31 downto 0);
    in_59 : IN STD_LOGIC_VECTOR (31 downto 0);
    a : IN STD_LOGIC_VECTOR (15 downto 0);
    b : IN STD_LOGIC_VECTOR (15 downto 0);
    c : IN STD_LOGIC_VECTOR (31 downto 0);
    out_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_0_ap_vld : OUT STD_LOGIC;
    out_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_1_ap_vld : OUT STD_LOGIC;
    out_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_2_ap_vld : OUT STD_LOGIC;
    out_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_3_ap_vld : OUT STD_LOGIC;
    out_4 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_4_ap_vld : OUT STD_LOGIC;
    out_5 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_5_ap_vld : OUT STD_LOGIC;
    out_6 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_6_ap_vld : OUT STD_LOGIC;
    out_7 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_7_ap_vld : OUT STD_LOGIC;
    out_8 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_8_ap_vld : OUT STD_LOGIC;
    out_9 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_9_ap_vld : OUT STD_LOGIC;
    out_10 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_10_ap_vld : OUT STD_LOGIC;
    out_11 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_11_ap_vld : OUT STD_LOGIC;
    out_12 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_12_ap_vld : OUT STD_LOGIC;
    out_13 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_13_ap_vld : OUT STD_LOGIC;
    out_14 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_14_ap_vld : OUT STD_LOGIC;
    out_15 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_15_ap_vld : OUT STD_LOGIC;
    out_16 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_16_ap_vld : OUT STD_LOGIC;
    out_17 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_17_ap_vld : OUT STD_LOGIC;
    out_18 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_18_ap_vld : OUT STD_LOGIC;
    out_19 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_19_ap_vld : OUT STD_LOGIC;
    out_20 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_20_ap_vld : OUT STD_LOGIC;
    out_21 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_21_ap_vld : OUT STD_LOGIC;
    out_22 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_22_ap_vld : OUT STD_LOGIC;
    out_23 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_23_ap_vld : OUT STD_LOGIC;
    out_24 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_24_ap_vld : OUT STD_LOGIC;
    out_25 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_25_ap_vld : OUT STD_LOGIC;
    out_26 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_26_ap_vld : OUT STD_LOGIC;
    out_27 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_27_ap_vld : OUT STD_LOGIC;
    out_28 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_28_ap_vld : OUT STD_LOGIC;
    out_29 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_29_ap_vld : OUT STD_LOGIC;
    out_30 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_30_ap_vld : OUT STD_LOGIC;
    out_31 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_31_ap_vld : OUT STD_LOGIC;
    out_32 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_32_ap_vld : OUT STD_LOGIC;
    out_33 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_33_ap_vld : OUT STD_LOGIC;
    out_34 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_34_ap_vld : OUT STD_LOGIC;
    out_35 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_35_ap_vld : OUT STD_LOGIC;
    out_36 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_36_ap_vld : OUT STD_LOGIC;
    out_37 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_37_ap_vld : OUT STD_LOGIC;
    out_38 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_38_ap_vld : OUT STD_LOGIC;
    out_39 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_39_ap_vld : OUT STD_LOGIC;
    out_40 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_40_ap_vld : OUT STD_LOGIC;
    out_41 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_41_ap_vld : OUT STD_LOGIC;
    out_42 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_42_ap_vld : OUT STD_LOGIC;
    out_43 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_43_ap_vld : OUT STD_LOGIC;
    out_44 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_44_ap_vld : OUT STD_LOGIC;
    out_45 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_45_ap_vld : OUT STD_LOGIC;
    out_46 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_46_ap_vld : OUT STD_LOGIC;
    out_47 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_47_ap_vld : OUT STD_LOGIC;
    out_48 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_48_ap_vld : OUT STD_LOGIC;
    out_49 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_49_ap_vld : OUT STD_LOGIC;
    out_50 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_50_ap_vld : OUT STD_LOGIC;
    out_51 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_51_ap_vld : OUT STD_LOGIC;
    out_52 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_52_ap_vld : OUT STD_LOGIC;
    out_53 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_53_ap_vld : OUT STD_LOGIC;
    out_54 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_54_ap_vld : OUT STD_LOGIC;
    out_55 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_55_ap_vld : OUT STD_LOGIC;
    out_56 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_56_ap_vld : OUT STD_LOGIC;
    out_57 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_57_ap_vld : OUT STD_LOGIC;
    out_58 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_58_ap_vld : OUT STD_LOGIC;
    out_59 : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_59_ap_vld : OUT STD_LOGIC );
end;


architecture behav of lec8Ex1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lec8Ex1,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.049667,HLS_SYN_LAT=121,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=143,HLS_SYN_LUT=439,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_3A : STD_LOGIC_VECTOR (5 downto 0) := "111010";
    constant ap_const_lv6_39 : STD_LOGIC_VECTOR (5 downto 0) := "111001";
    constant ap_const_lv6_38 : STD_LOGIC_VECTOR (5 downto 0) := "111000";
    constant ap_const_lv6_37 : STD_LOGIC_VECTOR (5 downto 0) := "110111";
    constant ap_const_lv6_36 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_const_lv6_35 : STD_LOGIC_VECTOR (5 downto 0) := "110101";
    constant ap_const_lv6_34 : STD_LOGIC_VECTOR (5 downto 0) := "110100";
    constant ap_const_lv6_33 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_2F : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_const_lv6_2E : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_const_lv6_2D : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv6_2B : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_const_lv6_2A : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_const_lv6_29 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_27 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_const_lv6_26 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_const_lv6_25 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_23 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_const_lv6_22 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_lv6_1D : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_const_lv6_1C : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_const_lv6_1B : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_3E : STD_LOGIC_VECTOR (5 downto 0) := "111110";
    constant ap_const_lv6_3D : STD_LOGIC_VECTOR (5 downto 0) := "111101";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_3B : STD_LOGIC_VECTOR (5 downto 0) := "111011";
    constant ap_const_lv17_27 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sext_ln24_fu_1202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln24_reg_1438 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_fu_1210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_reg_1443 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln24_1_fu_1222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln24_1_reg_1448 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_1232_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_1456 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal mul_ln24_fu_1364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln24_reg_1461 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln17_fu_1226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_1190 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal y_fu_1373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_fu_1210_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_fu_1210_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln34_fu_1206_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln24_1_fu_1216_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_fu_1238_p62 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln24_fu_1364_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln24_fu_1369_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component lec8Ex1_mux_606_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        din26_WIDTH : INTEGER;
        din27_WIDTH : INTEGER;
        din28_WIDTH : INTEGER;
        din29_WIDTH : INTEGER;
        din30_WIDTH : INTEGER;
        din31_WIDTH : INTEGER;
        din32_WIDTH : INTEGER;
        din33_WIDTH : INTEGER;
        din34_WIDTH : INTEGER;
        din35_WIDTH : INTEGER;
        din36_WIDTH : INTEGER;
        din37_WIDTH : INTEGER;
        din38_WIDTH : INTEGER;
        din39_WIDTH : INTEGER;
        din40_WIDTH : INTEGER;
        din41_WIDTH : INTEGER;
        din42_WIDTH : INTEGER;
        din43_WIDTH : INTEGER;
        din44_WIDTH : INTEGER;
        din45_WIDTH : INTEGER;
        din46_WIDTH : INTEGER;
        din47_WIDTH : INTEGER;
        din48_WIDTH : INTEGER;
        din49_WIDTH : INTEGER;
        din50_WIDTH : INTEGER;
        din51_WIDTH : INTEGER;
        din52_WIDTH : INTEGER;
        din53_WIDTH : INTEGER;
        din54_WIDTH : INTEGER;
        din55_WIDTH : INTEGER;
        din56_WIDTH : INTEGER;
        din57_WIDTH : INTEGER;
        din58_WIDTH : INTEGER;
        din59_WIDTH : INTEGER;
        din60_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (31 downto 0);
        din17 : IN STD_LOGIC_VECTOR (31 downto 0);
        din18 : IN STD_LOGIC_VECTOR (31 downto 0);
        din19 : IN STD_LOGIC_VECTOR (31 downto 0);
        din20 : IN STD_LOGIC_VECTOR (31 downto 0);
        din21 : IN STD_LOGIC_VECTOR (31 downto 0);
        din22 : IN STD_LOGIC_VECTOR (31 downto 0);
        din23 : IN STD_LOGIC_VECTOR (31 downto 0);
        din24 : IN STD_LOGIC_VECTOR (31 downto 0);
        din25 : IN STD_LOGIC_VECTOR (31 downto 0);
        din26 : IN STD_LOGIC_VECTOR (31 downto 0);
        din27 : IN STD_LOGIC_VECTOR (31 downto 0);
        din28 : IN STD_LOGIC_VECTOR (31 downto 0);
        din29 : IN STD_LOGIC_VECTOR (31 downto 0);
        din30 : IN STD_LOGIC_VECTOR (31 downto 0);
        din31 : IN STD_LOGIC_VECTOR (31 downto 0);
        din32 : IN STD_LOGIC_VECTOR (31 downto 0);
        din33 : IN STD_LOGIC_VECTOR (31 downto 0);
        din34 : IN STD_LOGIC_VECTOR (31 downto 0);
        din35 : IN STD_LOGIC_VECTOR (31 downto 0);
        din36 : IN STD_LOGIC_VECTOR (31 downto 0);
        din37 : IN STD_LOGIC_VECTOR (31 downto 0);
        din38 : IN STD_LOGIC_VECTOR (31 downto 0);
        din39 : IN STD_LOGIC_VECTOR (31 downto 0);
        din40 : IN STD_LOGIC_VECTOR (31 downto 0);
        din41 : IN STD_LOGIC_VECTOR (31 downto 0);
        din42 : IN STD_LOGIC_VECTOR (31 downto 0);
        din43 : IN STD_LOGIC_VECTOR (31 downto 0);
        din44 : IN STD_LOGIC_VECTOR (31 downto 0);
        din45 : IN STD_LOGIC_VECTOR (31 downto 0);
        din46 : IN STD_LOGIC_VECTOR (31 downto 0);
        din47 : IN STD_LOGIC_VECTOR (31 downto 0);
        din48 : IN STD_LOGIC_VECTOR (31 downto 0);
        din49 : IN STD_LOGIC_VECTOR (31 downto 0);
        din50 : IN STD_LOGIC_VECTOR (31 downto 0);
        din51 : IN STD_LOGIC_VECTOR (31 downto 0);
        din52 : IN STD_LOGIC_VECTOR (31 downto 0);
        din53 : IN STD_LOGIC_VECTOR (31 downto 0);
        din54 : IN STD_LOGIC_VECTOR (31 downto 0);
        din55 : IN STD_LOGIC_VECTOR (31 downto 0);
        din56 : IN STD_LOGIC_VECTOR (31 downto 0);
        din57 : IN STD_LOGIC_VECTOR (31 downto 0);
        din58 : IN STD_LOGIC_VECTOR (31 downto 0);
        din59 : IN STD_LOGIC_VECTOR (31 downto 0);
        din60 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    lec8Ex1_mux_606_3bkb_U1 : component lec8Ex1_mux_606_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 32,
        din17_WIDTH => 32,
        din18_WIDTH => 32,
        din19_WIDTH => 32,
        din20_WIDTH => 32,
        din21_WIDTH => 32,
        din22_WIDTH => 32,
        din23_WIDTH => 32,
        din24_WIDTH => 32,
        din25_WIDTH => 32,
        din26_WIDTH => 32,
        din27_WIDTH => 32,
        din28_WIDTH => 32,
        din29_WIDTH => 32,
        din30_WIDTH => 32,
        din31_WIDTH => 32,
        din32_WIDTH => 32,
        din33_WIDTH => 32,
        din34_WIDTH => 32,
        din35_WIDTH => 32,
        din36_WIDTH => 32,
        din37_WIDTH => 32,
        din38_WIDTH => 32,
        din39_WIDTH => 32,
        din40_WIDTH => 32,
        din41_WIDTH => 32,
        din42_WIDTH => 32,
        din43_WIDTH => 32,
        din44_WIDTH => 32,
        din45_WIDTH => 32,
        din46_WIDTH => 32,
        din47_WIDTH => 32,
        din48_WIDTH => 32,
        din49_WIDTH => 32,
        din50_WIDTH => 32,
        din51_WIDTH => 32,
        din52_WIDTH => 32,
        din53_WIDTH => 32,
        din54_WIDTH => 32,
        din55_WIDTH => 32,
        din56_WIDTH => 32,
        din57_WIDTH => 32,
        din58_WIDTH => 32,
        din59_WIDTH => 32,
        din60_WIDTH => 6,
        dout_WIDTH => 32)
    port map (
        din0 => in_0,
        din1 => in_1,
        din2 => in_2,
        din3 => in_3,
        din4 => in_4,
        din5 => in_5,
        din6 => in_6,
        din7 => in_7,
        din8 => in_8,
        din9 => in_9,
        din10 => in_10,
        din11 => in_11,
        din12 => in_12,
        din13 => in_13,
        din14 => in_14,
        din15 => in_15,
        din16 => in_16,
        din17 => in_17,
        din18 => in_18,
        din19 => in_19,
        din20 => in_20,
        din21 => in_21,
        din22 => in_22,
        din23 => in_23,
        din24 => in_24,
        din25 => in_25,
        din26 => in_26,
        din27 => in_27,
        din28 => in_28,
        din29 => in_29,
        din30 => in_30,
        din31 => in_31,
        din32 => in_32,
        din33 => in_33,
        din34 => in_34,
        din35 => in_35,
        din36 => in_36,
        din37 => in_37,
        din38 => in_38,
        din39 => in_39,
        din40 => in_40,
        din41 => in_41,
        din42 => in_42,
        din43 => in_43,
        din44 => in_44,
        din45 => in_45,
        din46 => in_46,
        din47 => in_47,
        din48 => in_48,
        din49 => in_49,
        din50 => in_50,
        din51 => in_51,
        din52 => in_52,
        din53 => in_53,
        din54 => in_54,
        din55 => in_55,
        din56 => in_56,
        din57 => in_57,
        din58 => in_58,
        din59 => in_59,
        din60 => i_0_reg_1190,
        dout => x_fu_1238_p62);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_1190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_1190 <= i_reg_1456;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_1190 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1456 <= i_fu_1232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_1226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mul_ln24_reg_1461 <= mul_ln24_fu_1364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                res_reg_1443 <= res_fu_1210_p2;
                sext_ln24_1_reg_1448 <= sext_ln24_1_fu_1222_p1;
                sext_ln24_reg_1438 <= sext_ln24_fu_1202_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln17_fu_1226_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln17_fu_1226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln24_1_fu_1216_p2 <= std_logic_vector(signed(sext_ln34_fu_1206_p1) + signed(ap_const_lv17_27));
    add_ln24_fu_1369_p2 <= std_logic_vector(unsigned(res_reg_1443) + unsigned(mul_ln24_reg_1461));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_1226_p2)
    begin
        if (((icmp_ln17_fu_1226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln17_fu_1226_p2)
    begin
        if (((icmp_ln17_fu_1226_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_1232_p2 <= std_logic_vector(unsigned(i_0_reg_1190) + unsigned(ap_const_lv6_1));
    icmp_ln17_fu_1226_p2 <= "1" when (i_0_reg_1190 = ap_const_lv6_3C) else "0";
    mul_ln24_fu_1364_p1 <= sext_ln24_reg_1438(16 - 1 downto 0);
    mul_ln24_fu_1364_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(x_fu_1238_p62) * signed(mul_ln24_fu_1364_p1))), 32));
    out_0 <= y_fu_1373_p2;

    out_0_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_0_ap_vld <= ap_const_logic_1;
        else 
            out_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_1 <= y_fu_1373_p2;
    out_10 <= y_fu_1373_p2;

    out_10_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_A) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_10_ap_vld <= ap_const_logic_1;
        else 
            out_10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_11 <= y_fu_1373_p2;

    out_11_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_B) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_11_ap_vld <= ap_const_logic_1;
        else 
            out_11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_12 <= y_fu_1373_p2;

    out_12_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_C) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_12_ap_vld <= ap_const_logic_1;
        else 
            out_12_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_13 <= y_fu_1373_p2;

    out_13_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_D) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_13_ap_vld <= ap_const_logic_1;
        else 
            out_13_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_14 <= y_fu_1373_p2;

    out_14_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_E) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_14_ap_vld <= ap_const_logic_1;
        else 
            out_14_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_15 <= y_fu_1373_p2;

    out_15_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_F) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_15_ap_vld <= ap_const_logic_1;
        else 
            out_15_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_16 <= y_fu_1373_p2;

    out_16_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_10) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_16_ap_vld <= ap_const_logic_1;
        else 
            out_16_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_17 <= y_fu_1373_p2;

    out_17_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_11) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_17_ap_vld <= ap_const_logic_1;
        else 
            out_17_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_18 <= y_fu_1373_p2;

    out_18_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_12) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_18_ap_vld <= ap_const_logic_1;
        else 
            out_18_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_19 <= y_fu_1373_p2;

    out_19_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_13) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_19_ap_vld <= ap_const_logic_1;
        else 
            out_19_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_1_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_1_ap_vld <= ap_const_logic_1;
        else 
            out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_2 <= y_fu_1373_p2;
    out_20 <= y_fu_1373_p2;

    out_20_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_14) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_20_ap_vld <= ap_const_logic_1;
        else 
            out_20_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_21 <= y_fu_1373_p2;

    out_21_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_15) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_21_ap_vld <= ap_const_logic_1;
        else 
            out_21_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_22 <= y_fu_1373_p2;

    out_22_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_16) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_22_ap_vld <= ap_const_logic_1;
        else 
            out_22_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_23 <= y_fu_1373_p2;

    out_23_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_17) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_23_ap_vld <= ap_const_logic_1;
        else 
            out_23_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_24 <= y_fu_1373_p2;

    out_24_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_18) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_24_ap_vld <= ap_const_logic_1;
        else 
            out_24_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_25 <= y_fu_1373_p2;

    out_25_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_19) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_25_ap_vld <= ap_const_logic_1;
        else 
            out_25_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_26 <= y_fu_1373_p2;

    out_26_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_1A) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_26_ap_vld <= ap_const_logic_1;
        else 
            out_26_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_27 <= y_fu_1373_p2;

    out_27_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_1B) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_27_ap_vld <= ap_const_logic_1;
        else 
            out_27_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_28 <= y_fu_1373_p2;

    out_28_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_1C) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_28_ap_vld <= ap_const_logic_1;
        else 
            out_28_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_29 <= y_fu_1373_p2;

    out_29_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_1D) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_29_ap_vld <= ap_const_logic_1;
        else 
            out_29_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_2_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_2) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_2_ap_vld <= ap_const_logic_1;
        else 
            out_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_3 <= y_fu_1373_p2;
    out_30 <= y_fu_1373_p2;

    out_30_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_1E) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_30_ap_vld <= ap_const_logic_1;
        else 
            out_30_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_31 <= y_fu_1373_p2;

    out_31_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_1F) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_31_ap_vld <= ap_const_logic_1;
        else 
            out_31_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_32 <= y_fu_1373_p2;

    out_32_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_20) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_32_ap_vld <= ap_const_logic_1;
        else 
            out_32_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_33 <= y_fu_1373_p2;

    out_33_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_21) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_33_ap_vld <= ap_const_logic_1;
        else 
            out_33_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_34 <= y_fu_1373_p2;

    out_34_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_22) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_34_ap_vld <= ap_const_logic_1;
        else 
            out_34_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_35 <= y_fu_1373_p2;

    out_35_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_23) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_35_ap_vld <= ap_const_logic_1;
        else 
            out_35_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_36 <= y_fu_1373_p2;

    out_36_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_24) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_36_ap_vld <= ap_const_logic_1;
        else 
            out_36_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_37 <= y_fu_1373_p2;

    out_37_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_25) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_37_ap_vld <= ap_const_logic_1;
        else 
            out_37_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_38 <= y_fu_1373_p2;

    out_38_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_26) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_38_ap_vld <= ap_const_logic_1;
        else 
            out_38_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_39 <= y_fu_1373_p2;

    out_39_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_27) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_39_ap_vld <= ap_const_logic_1;
        else 
            out_39_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_3_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_3) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_3_ap_vld <= ap_const_logic_1;
        else 
            out_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_4 <= y_fu_1373_p2;
    out_40 <= y_fu_1373_p2;

    out_40_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_28) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_40_ap_vld <= ap_const_logic_1;
        else 
            out_40_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_41 <= y_fu_1373_p2;

    out_41_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_29) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_41_ap_vld <= ap_const_logic_1;
        else 
            out_41_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_42 <= y_fu_1373_p2;

    out_42_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_2A) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_42_ap_vld <= ap_const_logic_1;
        else 
            out_42_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_43 <= y_fu_1373_p2;

    out_43_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_2B) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_43_ap_vld <= ap_const_logic_1;
        else 
            out_43_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_44 <= y_fu_1373_p2;

    out_44_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_2C) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_44_ap_vld <= ap_const_logic_1;
        else 
            out_44_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_45 <= y_fu_1373_p2;

    out_45_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_2D) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_45_ap_vld <= ap_const_logic_1;
        else 
            out_45_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_46 <= y_fu_1373_p2;

    out_46_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_2E) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_46_ap_vld <= ap_const_logic_1;
        else 
            out_46_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_47 <= y_fu_1373_p2;

    out_47_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_2F) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_47_ap_vld <= ap_const_logic_1;
        else 
            out_47_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_48 <= y_fu_1373_p2;

    out_48_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_30) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_48_ap_vld <= ap_const_logic_1;
        else 
            out_48_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_49 <= y_fu_1373_p2;

    out_49_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_31) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_49_ap_vld <= ap_const_logic_1;
        else 
            out_49_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_4_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_4) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_4_ap_vld <= ap_const_logic_1;
        else 
            out_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_5 <= y_fu_1373_p2;
    out_50 <= y_fu_1373_p2;

    out_50_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_32) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_50_ap_vld <= ap_const_logic_1;
        else 
            out_50_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_51 <= y_fu_1373_p2;

    out_51_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_33) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_51_ap_vld <= ap_const_logic_1;
        else 
            out_51_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_52 <= y_fu_1373_p2;

    out_52_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_34) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_52_ap_vld <= ap_const_logic_1;
        else 
            out_52_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_53 <= y_fu_1373_p2;

    out_53_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_35) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_53_ap_vld <= ap_const_logic_1;
        else 
            out_53_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_54 <= y_fu_1373_p2;

    out_54_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_36) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_54_ap_vld <= ap_const_logic_1;
        else 
            out_54_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_55 <= y_fu_1373_p2;

    out_55_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_37) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_55_ap_vld <= ap_const_logic_1;
        else 
            out_55_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_56 <= y_fu_1373_p2;

    out_56_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_38) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_56_ap_vld <= ap_const_logic_1;
        else 
            out_56_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_57 <= y_fu_1373_p2;

    out_57_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_39) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_57_ap_vld <= ap_const_logic_1;
        else 
            out_57_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_58 <= y_fu_1373_p2;

    out_58_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_3A) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_58_ap_vld <= ap_const_logic_1;
        else 
            out_58_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_59 <= y_fu_1373_p2;

    out_59_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and ((i_0_reg_1190 = ap_const_lv6_3B) or ((i_0_reg_1190 = ap_const_lv6_3C) or ((i_0_reg_1190 = ap_const_lv6_3D) or ((i_0_reg_1190 = ap_const_lv6_3E) or (i_0_reg_1190 = ap_const_lv6_3F))))))) then 
            out_59_ap_vld <= ap_const_logic_1;
        else 
            out_59_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    out_5_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_5) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_5_ap_vld <= ap_const_logic_1;
        else 
            out_5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_6 <= y_fu_1373_p2;

    out_6_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_6) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_6_ap_vld <= ap_const_logic_1;
        else 
            out_6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_7 <= y_fu_1373_p2;

    out_7_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_7) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_7_ap_vld <= ap_const_logic_1;
        else 
            out_7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_8 <= y_fu_1373_p2;

    out_8_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_8) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_8_ap_vld <= ap_const_logic_1;
        else 
            out_8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    out_9 <= y_fu_1373_p2;

    out_9_ap_vld_assign_proc : process(i_0_reg_1190, ap_CS_fsm_state3)
    begin
        if (((i_0_reg_1190 = ap_const_lv6_9) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            out_9_ap_vld <= ap_const_logic_1;
        else 
            out_9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    res_fu_1210_p0 <= c;
    res_fu_1210_p1 <= c;
    res_fu_1210_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(res_fu_1210_p0) * signed(res_fu_1210_p1))), 32));
        sext_ln24_1_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln24_1_fu_1216_p2),32));

        sext_ln24_fu_1202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(a),32));

        sext_ln34_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b),17));

    y_fu_1373_p2 <= std_logic_vector(signed(sext_ln24_1_reg_1448) + signed(add_ln24_fu_1369_p2));
end behav;
