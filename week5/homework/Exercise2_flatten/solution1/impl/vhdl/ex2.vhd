-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ex2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of ex2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ex2,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.494000,HLS_SYN_LAT=73,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=39,HLS_SYN_LUT=194,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv6_24 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln8_fu_135_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln8_reg_290 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal select_ln11_fu_153_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln11_reg_295 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln8_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln11_1_fu_161_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln11_1_reg_301 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_fu_275_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal indvar_flatten_reg_91 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_0_reg_102 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_113 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln11_3_fu_214_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_1_fu_199_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_fu_222_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln12_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_1_fu_48 : STD_LOGIC_VECTOR (11 downto 0);
    signal acc_fu_252_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln9_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_141_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_169_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_181_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln11_2_fu_177_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln11_3_fu_189_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln11_4_fu_204_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln11_fu_193_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln11_fu_208_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln11_fu_234_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_fu_234_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_fu_234_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln11_2_fu_240_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln11_1_fu_248_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln11_fu_244_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    acc_1_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_258_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                acc_1_fu_48 <= acc_fu_252_p2;
            elsif ((((icmp_ln12_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                acc_1_fu_48 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    i_0_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_102 <= select_ln11_1_reg_301;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_102 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_91_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                indvar_flatten_reg_91 <= add_ln8_reg_290;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_91 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_reg_113 <= j_fu_275_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_113 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_290 <= add_ln8_fu_135_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                select_ln11_1_reg_301 <= select_ln11_1_fu_161_p3;
                select_ln11_reg_295 <= select_ln11_fu_153_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_129_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    A_address0 <= sext_ln11_3_fu_214_p1(6 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= zext_ln11_1_fu_199_p1(3 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= zext_ln11_fu_222_p1(3 - 1 downto 0);

    C_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= std_logic_vector(unsigned(trunc_ln11_1_fu_248_p1) + unsigned(trunc_ln11_fu_244_p1));

    C_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln12_fu_258_p2)
    begin
        if (((icmp_ln12_fu_258_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    acc_fu_252_p2 <= std_logic_vector(unsigned(acc_1_fu_48) + unsigned(sext_ln11_2_fu_240_p1));
    add_ln11_fu_208_p2 <= std_logic_vector(unsigned(zext_ln11_4_fu_204_p1) + unsigned(sub_ln11_fu_193_p2));
    add_ln8_fu_135_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_91) + unsigned(ap_const_lv6_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_129_p2)
    begin
        if (((icmp_ln8_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_129_p2)
    begin
        if (((icmp_ln8_fu_129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_141_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_0_reg_102));
    icmp_ln12_fu_258_p2 <= "1" when (select_ln11_reg_295 = ap_const_lv3_5) else "0";
    icmp_ln8_fu_129_p2 <= "1" when (indvar_flatten_reg_91 = ap_const_lv6_24) else "0";
    icmp_ln9_fu_147_p2 <= "1" when (j_0_reg_113 = ap_const_lv3_6) else "0";
    j_fu_275_p2 <= std_logic_vector(unsigned(select_ln11_reg_295) + unsigned(ap_const_lv3_1));
    mul_ln11_fu_234_p0 <= A_q0;
    mul_ln11_fu_234_p1 <= B_q0;
    mul_ln11_fu_234_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln11_fu_234_p0) * signed(mul_ln11_fu_234_p1))), 10));
    select_ln11_1_fu_161_p3 <= 
        i_fu_141_p2 when (icmp_ln9_fu_147_p2(0) = '1') else 
        i_0_reg_102;
    select_ln11_fu_153_p3 <= 
        ap_const_lv3_0 when (icmp_ln9_fu_147_p2(0) = '1') else 
        j_0_reg_113;
        sext_ln11_2_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln11_fu_234_p2),12));

        sext_ln11_3_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln11_fu_208_p2),64));

    sub_ln11_fu_193_p2 <= std_logic_vector(unsigned(zext_ln11_2_fu_177_p1) - unsigned(zext_ln11_3_fu_189_p1));
    tmp_1_fu_181_p3 <= (select_ln11_1_fu_161_p3 & ap_const_lv1_0);
    tmp_fu_169_p3 <= (select_ln11_1_fu_161_p3 & ap_const_lv3_0);
    trunc_ln11_1_fu_248_p1 <= mul_ln11_fu_234_p2(6 - 1 downto 0);
    trunc_ln11_fu_244_p1 <= acc_1_fu_48(6 - 1 downto 0);
    zext_ln11_1_fu_199_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln11_fu_153_p3),64));
    zext_ln11_2_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_169_p3),7));
    zext_ln11_3_fu_189_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_181_p3),7));
    zext_ln11_4_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln11_fu_153_p3),7));
    zext_ln11_fu_222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln11_1_reg_301),64));
end behav;
