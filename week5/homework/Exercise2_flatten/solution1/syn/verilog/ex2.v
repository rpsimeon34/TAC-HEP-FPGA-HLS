// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ex2,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.494000,HLS_SYN_LAT=73,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=39,HLS_SYN_LUT=194,HLS_VERSION=2020_1}" *)

module ex2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] A_address0;
output   A_ce0;
input  [4:0] A_q0;
output  [2:0] B_address0;
output   B_ce0;
input  [4:0] B_q0;
output  [2:0] C_address0;
output   C_ce0;
output   C_we0;
output  [5:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] add_ln8_fu_135_p2;
reg   [5:0] add_ln8_reg_290;
wire    ap_CS_fsm_state2;
wire   [2:0] select_ln11_fu_153_p3;
reg   [2:0] select_ln11_reg_295;
wire   [0:0] icmp_ln8_fu_129_p2;
wire   [2:0] select_ln11_1_fu_161_p3;
reg   [2:0] select_ln11_1_reg_301;
wire   [2:0] j_fu_275_p2;
wire    ap_CS_fsm_state3;
reg   [5:0] indvar_flatten_reg_91;
reg   [2:0] i_0_reg_102;
reg   [2:0] j_0_reg_113;
wire  signed [63:0] sext_ln11_3_fu_214_p1;
wire   [63:0] zext_ln11_1_fu_199_p1;
wire   [63:0] zext_ln11_fu_222_p1;
wire   [0:0] icmp_ln12_fu_258_p2;
reg   [11:0] acc_1_fu_48;
wire   [11:0] acc_fu_252_p2;
wire   [0:0] icmp_ln9_fu_147_p2;
wire   [2:0] i_fu_141_p2;
wire   [5:0] tmp_fu_169_p3;
wire   [3:0] tmp_1_fu_181_p3;
wire   [6:0] zext_ln11_2_fu_177_p1;
wire   [6:0] zext_ln11_3_fu_189_p1;
wire   [6:0] zext_ln11_4_fu_204_p1;
wire   [6:0] sub_ln11_fu_193_p2;
wire   [6:0] add_ln11_fu_208_p2;
wire  signed [4:0] mul_ln11_fu_234_p0;
wire  signed [4:0] mul_ln11_fu_234_p1;
wire  signed [9:0] mul_ln11_fu_234_p2;
wire  signed [11:0] sext_ln11_2_fu_240_p1;
wire   [5:0] trunc_ln11_1_fu_248_p1;
wire   [5:0] trunc_ln11_fu_244_p1;
reg   [2:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_258_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        acc_1_fu_48 <= acc_fu_252_p2;
    end else if ((((icmp_ln12_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        acc_1_fu_48 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_0_reg_102 <= select_ln11_1_reg_301;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_102 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        indvar_flatten_reg_91 <= add_ln8_reg_290;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_91 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_reg_113 <= j_fu_275_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_0_reg_113 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_290 <= add_ln8_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_129_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        select_ln11_1_reg_301 <= select_ln11_1_fu_161_p3;
        select_ln11_reg_295 <= select_ln11_fu_153_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_258_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_129_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = sext_ln11_3_fu_214_p1;

assign B_address0 = zext_ln11_1_fu_199_p1;

assign C_address0 = zext_ln11_fu_222_p1;

assign C_d0 = (trunc_ln11_1_fu_248_p1 + trunc_ln11_fu_244_p1);

assign acc_fu_252_p2 = ($signed(acc_1_fu_48) + $signed(sext_ln11_2_fu_240_p1));

assign add_ln11_fu_208_p2 = (zext_ln11_4_fu_204_p1 + sub_ln11_fu_193_p2);

assign add_ln8_fu_135_p2 = (indvar_flatten_reg_91 + 6'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign i_fu_141_p2 = (3'd1 + i_0_reg_102);

assign icmp_ln12_fu_258_p2 = ((select_ln11_reg_295 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_129_p2 = ((indvar_flatten_reg_91 == 6'd36) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_147_p2 = ((j_0_reg_113 == 3'd6) ? 1'b1 : 1'b0);

assign j_fu_275_p2 = (select_ln11_reg_295 + 3'd1);

assign mul_ln11_fu_234_p0 = A_q0;

assign mul_ln11_fu_234_p1 = B_q0;

assign mul_ln11_fu_234_p2 = ($signed(mul_ln11_fu_234_p0) * $signed(mul_ln11_fu_234_p1));

assign select_ln11_1_fu_161_p3 = ((icmp_ln9_fu_147_p2[0:0] === 1'b1) ? i_fu_141_p2 : i_0_reg_102);

assign select_ln11_fu_153_p3 = ((icmp_ln9_fu_147_p2[0:0] === 1'b1) ? 3'd0 : j_0_reg_113);

assign sext_ln11_2_fu_240_p1 = mul_ln11_fu_234_p2;

assign sext_ln11_3_fu_214_p1 = $signed(add_ln11_fu_208_p2);

assign sub_ln11_fu_193_p2 = (zext_ln11_2_fu_177_p1 - zext_ln11_3_fu_189_p1);

assign tmp_1_fu_181_p3 = {{select_ln11_1_fu_161_p3}, {1'd0}};

assign tmp_fu_169_p3 = {{select_ln11_1_fu_161_p3}, {3'd0}};

assign trunc_ln11_1_fu_248_p1 = mul_ln11_fu_234_p2[5:0];

assign trunc_ln11_fu_244_p1 = acc_1_fu_48[5:0];

assign zext_ln11_1_fu_199_p1 = select_ln11_fu_153_p3;

assign zext_ln11_2_fu_177_p1 = tmp_fu_169_p3;

assign zext_ln11_3_fu_189_p1 = tmp_1_fu_181_p3;

assign zext_ln11_4_fu_204_p1 = select_ln11_fu_153_p3;

assign zext_ln11_fu_222_p1 = select_ln11_1_reg_301;

endmodule //ex2
