// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ex2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ex2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ex2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> ex2::ap_ST_fsm_state1 = "1";
const sc_lv<3> ex2::ap_ST_fsm_state2 = "10";
const sc_lv<3> ex2::ap_ST_fsm_state3 = "100";
const sc_lv<32> ex2::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> ex2::ap_const_lv32_1 = "1";
const sc_lv<1> ex2::ap_const_lv1_0 = "0";
const sc_lv<32> ex2::ap_const_lv32_2 = "10";
const sc_lv<6> ex2::ap_const_lv6_0 = "000000";
const sc_lv<3> ex2::ap_const_lv3_0 = "000";
const sc_lv<1> ex2::ap_const_lv1_1 = "1";
const sc_lv<12> ex2::ap_const_lv12_0 = "000000000000";
const sc_lv<6> ex2::ap_const_lv6_24 = "100100";
const sc_lv<6> ex2::ap_const_lv6_1 = "1";
const sc_lv<3> ex2::ap_const_lv3_1 = "1";
const sc_lv<3> ex2::ap_const_lv3_6 = "110";
const sc_lv<3> ex2::ap_const_lv3_5 = "101";
const bool ex2::ap_const_boolean_1 = true;

ex2::ex2(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( sext_ln11_3_fu_214_p1 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_B_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( zext_ln11_1_fu_199_p1 );

    SC_METHOD(thread_B_ce0);
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_C_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln11_fu_222_p1 );

    SC_METHOD(thread_C_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_C_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( trunc_ln11_1_fu_248_p1 );
    sensitive << ( trunc_ln11_fu_244_p1 );

    SC_METHOD(thread_C_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln12_fu_258_p2 );

    SC_METHOD(thread_acc_fu_252_p2);
    sensitive << ( acc_1_fu_48 );
    sensitive << ( sext_ln11_2_fu_240_p1 );

    SC_METHOD(thread_add_ln11_fu_208_p2);
    sensitive << ( zext_ln11_4_fu_204_p1 );
    sensitive << ( sub_ln11_fu_193_p2 );

    SC_METHOD(thread_add_ln8_fu_135_p2);
    sensitive << ( indvar_flatten_reg_91 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_129_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_129_p2 );

    SC_METHOD(thread_i_fu_141_p2);
    sensitive << ( i_0_reg_102 );

    SC_METHOD(thread_icmp_ln12_fu_258_p2);
    sensitive << ( select_ln11_reg_295 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_icmp_ln8_fu_129_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( indvar_flatten_reg_91 );

    SC_METHOD(thread_icmp_ln9_fu_147_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_129_p2 );
    sensitive << ( j_0_reg_113 );

    SC_METHOD(thread_j_fu_275_p2);
    sensitive << ( select_ln11_reg_295 );

    SC_METHOD(thread_mul_ln11_fu_234_p0);
    sensitive << ( A_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mul_ln11_fu_234_p1);
    sensitive << ( B_q0 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_mul_ln11_fu_234_p2);
    sensitive << ( mul_ln11_fu_234_p0 );
    sensitive << ( mul_ln11_fu_234_p1 );

    SC_METHOD(thread_select_ln11_1_fu_161_p3);
    sensitive << ( i_0_reg_102 );
    sensitive << ( icmp_ln9_fu_147_p2 );
    sensitive << ( i_fu_141_p2 );

    SC_METHOD(thread_select_ln11_fu_153_p3);
    sensitive << ( j_0_reg_113 );
    sensitive << ( icmp_ln9_fu_147_p2 );

    SC_METHOD(thread_sext_ln11_2_fu_240_p1);
    sensitive << ( mul_ln11_fu_234_p2 );

    SC_METHOD(thread_sext_ln11_3_fu_214_p1);
    sensitive << ( add_ln11_fu_208_p2 );

    SC_METHOD(thread_sub_ln11_fu_193_p2);
    sensitive << ( zext_ln11_2_fu_177_p1 );
    sensitive << ( zext_ln11_3_fu_189_p1 );

    SC_METHOD(thread_tmp_1_fu_181_p3);
    sensitive << ( select_ln11_1_fu_161_p3 );

    SC_METHOD(thread_tmp_fu_169_p3);
    sensitive << ( select_ln11_1_fu_161_p3 );

    SC_METHOD(thread_trunc_ln11_1_fu_248_p1);
    sensitive << ( mul_ln11_fu_234_p2 );

    SC_METHOD(thread_trunc_ln11_fu_244_p1);
    sensitive << ( acc_1_fu_48 );

    SC_METHOD(thread_zext_ln11_1_fu_199_p1);
    sensitive << ( select_ln11_fu_153_p3 );

    SC_METHOD(thread_zext_ln11_2_fu_177_p1);
    sensitive << ( tmp_fu_169_p3 );

    SC_METHOD(thread_zext_ln11_3_fu_189_p1);
    sensitive << ( tmp_1_fu_181_p3 );

    SC_METHOD(thread_zext_ln11_4_fu_204_p1);
    sensitive << ( select_ln11_fu_153_p3 );

    SC_METHOD(thread_zext_ln11_fu_222_p1);
    sensitive << ( select_ln11_1_reg_301 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln8_fu_129_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ex2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, B_address0, "(port)B_address0");
    sc_trace(mVcdFile, B_ce0, "(port)B_ce0");
    sc_trace(mVcdFile, B_q0, "(port)B_q0");
    sc_trace(mVcdFile, C_address0, "(port)C_address0");
    sc_trace(mVcdFile, C_ce0, "(port)C_ce0");
    sc_trace(mVcdFile, C_we0, "(port)C_we0");
    sc_trace(mVcdFile, C_d0, "(port)C_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, add_ln8_fu_135_p2, "add_ln8_fu_135_p2");
    sc_trace(mVcdFile, add_ln8_reg_290, "add_ln8_reg_290");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, select_ln11_fu_153_p3, "select_ln11_fu_153_p3");
    sc_trace(mVcdFile, select_ln11_reg_295, "select_ln11_reg_295");
    sc_trace(mVcdFile, icmp_ln8_fu_129_p2, "icmp_ln8_fu_129_p2");
    sc_trace(mVcdFile, select_ln11_1_fu_161_p3, "select_ln11_1_fu_161_p3");
    sc_trace(mVcdFile, select_ln11_1_reg_301, "select_ln11_1_reg_301");
    sc_trace(mVcdFile, j_fu_275_p2, "j_fu_275_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, indvar_flatten_reg_91, "indvar_flatten_reg_91");
    sc_trace(mVcdFile, i_0_reg_102, "i_0_reg_102");
    sc_trace(mVcdFile, j_0_reg_113, "j_0_reg_113");
    sc_trace(mVcdFile, sext_ln11_3_fu_214_p1, "sext_ln11_3_fu_214_p1");
    sc_trace(mVcdFile, zext_ln11_1_fu_199_p1, "zext_ln11_1_fu_199_p1");
    sc_trace(mVcdFile, zext_ln11_fu_222_p1, "zext_ln11_fu_222_p1");
    sc_trace(mVcdFile, icmp_ln12_fu_258_p2, "icmp_ln12_fu_258_p2");
    sc_trace(mVcdFile, acc_1_fu_48, "acc_1_fu_48");
    sc_trace(mVcdFile, acc_fu_252_p2, "acc_fu_252_p2");
    sc_trace(mVcdFile, icmp_ln9_fu_147_p2, "icmp_ln9_fu_147_p2");
    sc_trace(mVcdFile, i_fu_141_p2, "i_fu_141_p2");
    sc_trace(mVcdFile, tmp_fu_169_p3, "tmp_fu_169_p3");
    sc_trace(mVcdFile, tmp_1_fu_181_p3, "tmp_1_fu_181_p3");
    sc_trace(mVcdFile, zext_ln11_2_fu_177_p1, "zext_ln11_2_fu_177_p1");
    sc_trace(mVcdFile, zext_ln11_3_fu_189_p1, "zext_ln11_3_fu_189_p1");
    sc_trace(mVcdFile, zext_ln11_4_fu_204_p1, "zext_ln11_4_fu_204_p1");
    sc_trace(mVcdFile, sub_ln11_fu_193_p2, "sub_ln11_fu_193_p2");
    sc_trace(mVcdFile, add_ln11_fu_208_p2, "add_ln11_fu_208_p2");
    sc_trace(mVcdFile, mul_ln11_fu_234_p0, "mul_ln11_fu_234_p0");
    sc_trace(mVcdFile, mul_ln11_fu_234_p1, "mul_ln11_fu_234_p1");
    sc_trace(mVcdFile, mul_ln11_fu_234_p2, "mul_ln11_fu_234_p2");
    sc_trace(mVcdFile, sext_ln11_2_fu_240_p1, "sext_ln11_2_fu_240_p1");
    sc_trace(mVcdFile, trunc_ln11_1_fu_248_p1, "trunc_ln11_1_fu_248_p1");
    sc_trace(mVcdFile, trunc_ln11_fu_244_p1, "trunc_ln11_fu_244_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("ex2.hdltvin.dat");
    mHdltvoutHandle.open("ex2.hdltvout.dat");
}

ex2::~ex2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void ex2::thread_ap_clk_no_reset_() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln12_fu_258_p2.read()))) {
        acc_1_fu_48 = acc_fu_252_p2.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                 esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                 esl_seteq<1,1,1>(icmp_ln12_fu_258_p2.read(), ap_const_lv1_1)))) {
        acc_1_fu_48 = ap_const_lv12_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_0_reg_102 = select_ln11_1_reg_301.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_102 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        indvar_flatten_reg_91 = add_ln8_reg_290.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        indvar_flatten_reg_91 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_0_reg_113 = j_fu_275_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_0_reg_113 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        add_ln8_reg_290 = add_ln8_fu_135_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln8_fu_129_p2.read(), ap_const_lv1_0))) {
        select_ln11_1_reg_301 = select_ln11_1_fu_161_p3.read();
        select_ln11_reg_295 = select_ln11_fu_153_p3.read();
    }
}

void ex2::thread_A_address0() {
    A_address0 =  (sc_lv<6>) (sext_ln11_3_fu_214_p1.read());
}

void ex2::thread_A_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        A_ce0 = ap_const_logic_1;
    } else {
        A_ce0 = ap_const_logic_0;
    }
}

void ex2::thread_B_address0() {
    B_address0 =  (sc_lv<3>) (zext_ln11_1_fu_199_p1.read());
}

void ex2::thread_B_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        B_ce0 = ap_const_logic_1;
    } else {
        B_ce0 = ap_const_logic_0;
    }
}

void ex2::thread_C_address0() {
    C_address0 =  (sc_lv<3>) (zext_ln11_fu_222_p1.read());
}

void ex2::thread_C_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        C_ce0 = ap_const_logic_1;
    } else {
        C_ce0 = ap_const_logic_0;
    }
}

void ex2::thread_C_d0() {
    C_d0 = (!trunc_ln11_1_fu_248_p1.read().is_01() || !trunc_ln11_fu_244_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(trunc_ln11_1_fu_248_p1.read()) + sc_biguint<6>(trunc_ln11_fu_244_p1.read()));
}

void ex2::thread_C_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln12_fu_258_p2.read(), ap_const_lv1_1))) {
        C_we0 = ap_const_logic_1;
    } else {
        C_we0 = ap_const_logic_0;
    }
}

void ex2::thread_acc_fu_252_p2() {
    acc_fu_252_p2 = (!acc_1_fu_48.read().is_01() || !sext_ln11_2_fu_240_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(acc_1_fu_48.read()) + sc_bigint<12>(sext_ln11_2_fu_240_p1.read()));
}

void ex2::thread_add_ln11_fu_208_p2() {
    add_ln11_fu_208_p2 = (!zext_ln11_4_fu_204_p1.read().is_01() || !sub_ln11_fu_193_p2.read().is_01())? sc_lv<7>(): (sc_biguint<7>(zext_ln11_4_fu_204_p1.read()) + sc_biguint<7>(sub_ln11_fu_193_p2.read()));
}

void ex2::thread_add_ln8_fu_135_p2() {
    add_ln8_fu_135_p2 = (!indvar_flatten_reg_91.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(indvar_flatten_reg_91.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void ex2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ex2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void ex2::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void ex2::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_129_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ex2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ex2::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln8_fu_129_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ex2::thread_i_fu_141_p2() {
    i_fu_141_p2 = (!ap_const_lv3_1.is_01() || !i_0_reg_102.read().is_01())? sc_lv<3>(): (sc_biguint<3>(ap_const_lv3_1) + sc_biguint<3>(i_0_reg_102.read()));
}

void ex2::thread_icmp_ln12_fu_258_p2() {
    icmp_ln12_fu_258_p2 = (!select_ln11_reg_295.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(select_ln11_reg_295.read() == ap_const_lv3_5);
}

void ex2::thread_icmp_ln8_fu_129_p2() {
    icmp_ln8_fu_129_p2 = (!indvar_flatten_reg_91.read().is_01() || !ap_const_lv6_24.is_01())? sc_lv<1>(): sc_lv<1>(indvar_flatten_reg_91.read() == ap_const_lv6_24);
}

void ex2::thread_icmp_ln9_fu_147_p2() {
    icmp_ln9_fu_147_p2 = (!j_0_reg_113.read().is_01() || !ap_const_lv3_6.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_113.read() == ap_const_lv3_6);
}

void ex2::thread_j_fu_275_p2() {
    j_fu_275_p2 = (!select_ln11_reg_295.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(select_ln11_reg_295.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void ex2::thread_mul_ln11_fu_234_p0() {
    mul_ln11_fu_234_p0 = A_q0.read();
}

void ex2::thread_mul_ln11_fu_234_p1() {
    mul_ln11_fu_234_p1 = B_q0.read();
}

void ex2::thread_mul_ln11_fu_234_p2() {
    mul_ln11_fu_234_p2 = (!mul_ln11_fu_234_p0.read().is_01() || !mul_ln11_fu_234_p1.read().is_01())? sc_lv<10>(): sc_bigint<5>(mul_ln11_fu_234_p0.read()) * sc_bigint<5>(mul_ln11_fu_234_p1.read());
}

void ex2::thread_select_ln11_1_fu_161_p3() {
    select_ln11_1_fu_161_p3 = (!icmp_ln9_fu_147_p2.read()[0].is_01())? sc_lv<3>(): ((icmp_ln9_fu_147_p2.read()[0].to_bool())? i_fu_141_p2.read(): i_0_reg_102.read());
}

void ex2::thread_select_ln11_fu_153_p3() {
    select_ln11_fu_153_p3 = (!icmp_ln9_fu_147_p2.read()[0].is_01())? sc_lv<3>(): ((icmp_ln9_fu_147_p2.read()[0].to_bool())? ap_const_lv3_0: j_0_reg_113.read());
}

void ex2::thread_sext_ln11_2_fu_240_p1() {
    sext_ln11_2_fu_240_p1 = esl_sext<12,10>(mul_ln11_fu_234_p2.read());
}

void ex2::thread_sext_ln11_3_fu_214_p1() {
    sext_ln11_3_fu_214_p1 = esl_sext<64,7>(add_ln11_fu_208_p2.read());
}

void ex2::thread_sub_ln11_fu_193_p2() {
    sub_ln11_fu_193_p2 = (!zext_ln11_2_fu_177_p1.read().is_01() || !zext_ln11_3_fu_189_p1.read().is_01())? sc_lv<7>(): (sc_biguint<7>(zext_ln11_2_fu_177_p1.read()) - sc_biguint<7>(zext_ln11_3_fu_189_p1.read()));
}

void ex2::thread_tmp_1_fu_181_p3() {
    tmp_1_fu_181_p3 = esl_concat<3,1>(select_ln11_1_fu_161_p3.read(), ap_const_lv1_0);
}

void ex2::thread_tmp_fu_169_p3() {
    tmp_fu_169_p3 = esl_concat<3,3>(select_ln11_1_fu_161_p3.read(), ap_const_lv3_0);
}

void ex2::thread_trunc_ln11_1_fu_248_p1() {
    trunc_ln11_1_fu_248_p1 = mul_ln11_fu_234_p2.read().range(6-1, 0);
}

void ex2::thread_trunc_ln11_fu_244_p1() {
    trunc_ln11_fu_244_p1 = acc_1_fu_48.read().range(6-1, 0);
}

void ex2::thread_zext_ln11_1_fu_199_p1() {
    zext_ln11_1_fu_199_p1 = esl_zext<64,3>(select_ln11_fu_153_p3.read());
}

void ex2::thread_zext_ln11_2_fu_177_p1() {
    zext_ln11_2_fu_177_p1 = esl_zext<7,6>(tmp_fu_169_p3.read());
}

void ex2::thread_zext_ln11_3_fu_189_p1() {
    zext_ln11_3_fu_189_p1 = esl_zext<7,4>(tmp_1_fu_181_p3.read());
}

void ex2::thread_zext_ln11_4_fu_204_p1() {
    zext_ln11_4_fu_204_p1 = esl_zext<7,3>(select_ln11_fu_153_p3.read());
}

void ex2::thread_zext_ln11_fu_222_p1() {
    zext_ln11_fu_222_p1 = esl_zext<64,3>(select_ln11_1_reg_301.read());
}

void ex2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln8_fu_129_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}

void ex2::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_address0\" :  \"" << A_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"A_ce0\" :  \"" << A_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"A_q0\" :  \"" << A_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_address0\" :  \"" << B_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"B_ce0\" :  \"" << B_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"B_q0\" :  \"" << B_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_address0\" :  \"" << C_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_ce0\" :  \"" << C_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_we0\" :  \"" << C_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"C_d0\" :  \"" << C_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

