-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ex4 is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_A1 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_A2 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_A3 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_A4 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_A5 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_A6 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_A7 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_A8 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_A9 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_A10 : IN STD_LOGIC_VECTOR (31 downto 0);
    B : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_ap_vld : OUT STD_LOGIC );
end;


architecture behav of ex4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ex4,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.777000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=295,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal add_ln16_1_fu_105_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_2_fu_111_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_fu_99_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_5_fu_129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_6_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_4_fu_123_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_7_fu_141_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln16_3_fu_117_p2 : STD_LOGIC_VECTOR (31 downto 0);


begin



    B <= std_logic_vector(unsigned(add_ln16_7_fu_141_p2) + unsigned(add_ln16_3_fu_117_p2));

    B_ap_vld_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_1)) then 
            B_ap_vld <= ap_const_logic_1;
        else 
            B_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln16_1_fu_105_p2 <= std_logic_vector(unsigned(A_A4) + unsigned(A_A5));
    add_ln16_2_fu_111_p2 <= std_logic_vector(unsigned(add_ln16_1_fu_105_p2) + unsigned(A_A3));
    add_ln16_3_fu_117_p2 <= std_logic_vector(unsigned(add_ln16_2_fu_111_p2) + unsigned(add_ln16_fu_99_p2));
    add_ln16_4_fu_123_p2 <= std_logic_vector(unsigned(A_A6) + unsigned(A_A7));
    add_ln16_5_fu_129_p2 <= std_logic_vector(unsigned(A_A9) + unsigned(A_A10));
    add_ln16_6_fu_135_p2 <= std_logic_vector(unsigned(add_ln16_5_fu_129_p2) + unsigned(A_A8));
    add_ln16_7_fu_141_p2 <= std_logic_vector(unsigned(add_ln16_6_fu_135_p2) + unsigned(add_ln16_4_fu_123_p2));
    add_ln16_fu_99_p2 <= std_logic_vector(unsigned(A_A2) + unsigned(A_A1));
    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
end behav;
