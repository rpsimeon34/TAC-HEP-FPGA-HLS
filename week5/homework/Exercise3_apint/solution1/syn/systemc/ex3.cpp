// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ex3.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ex3::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic ex3::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> ex3::ap_ST_fsm_state1 = "1";
const sc_lv<10> ex3::ap_ST_fsm_state2 = "10";
const sc_lv<10> ex3::ap_ST_fsm_state3 = "100";
const sc_lv<10> ex3::ap_ST_fsm_state4 = "1000";
const sc_lv<10> ex3::ap_ST_fsm_state5 = "10000";
const sc_lv<10> ex3::ap_ST_fsm_state6 = "100000";
const sc_lv<10> ex3::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> ex3::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> ex3::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> ex3::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> ex3::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> ex3::ap_const_lv32_9 = "1001";
const bool ex3::ap_const_boolean_1 = true;

ex3::ex3(sc_module_name name) : sc_module(name), mVcdFile(0) {
    ex3_sdiv_6s_6ns_6bkb_U1 = new ex3_sdiv_6s_6ns_6bkb<1,10,6,6,6>("ex3_sdiv_6s_6ns_6bkb_U1");
    ex3_sdiv_6s_6ns_6bkb_U1->clk(ap_clk);
    ex3_sdiv_6s_6ns_6bkb_U1->reset(ap_rst);
    ex3_sdiv_6s_6ns_6bkb_U1->start(grp_fu_35_ap_start);
    ex3_sdiv_6s_6ns_6bkb_U1->done(grp_fu_35_ap_done);
    ex3_sdiv_6s_6ns_6bkb_U1->din0(a_V);
    ex3_sdiv_6s_6ns_6bkb_U1->din1(b_V);
    ex3_sdiv_6s_6ns_6bkb_U1->ce(ap_var_for_const0);
    ex3_sdiv_6s_6ns_6bkb_U1->dout(grp_fu_35_p2);
    ex3_mac_muladd_6scud_U2 = new ex3_mac_muladd_6scud<1,1,6,6,6,6>("ex3_mac_muladd_6scud_U2");
    ex3_mac_muladd_6scud_U2->din0(grp_fu_35_p2);
    ex3_mac_muladd_6scud_U2->din1(a_V);
    ex3_mac_muladd_6scud_U2->din2(grp_fu_45_p2);
    ex3_mac_muladd_6scud_U2->dout(grp_fu_45_p3);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_c_V);
    sensitive << ( grp_fu_45_p3 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_c_V_ap_vld);
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_grp_fu_35_ap_start);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_grp_fu_45_p2);
    sensitive << ( b_V );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( z_V_fu_41_p1 );

    SC_METHOD(thread_z_V_fu_41_p1);
    sensitive << ( a_V );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ex3_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, a_V, "(port)a_V");
    sc_trace(mVcdFile, b_V, "(port)b_V");
    sc_trace(mVcdFile, c_V, "(port)c_V");
    sc_trace(mVcdFile, c_V_ap_vld, "(port)c_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_45_p3, "grp_fu_45_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, z_V_fu_41_p1, "z_V_fu_41_p1");
    sc_trace(mVcdFile, grp_fu_35_p2, "grp_fu_35_p2");
    sc_trace(mVcdFile, grp_fu_45_p2, "grp_fu_45_p2");
    sc_trace(mVcdFile, grp_fu_35_ap_start, "grp_fu_35_ap_start");
    sc_trace(mVcdFile, grp_fu_35_ap_done, "grp_fu_35_ap_done");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("ex3.hdltvin.dat");
    mHdltvoutHandle.open("ex3.hdltvout.dat");
}

ex3::~ex3() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete ex3_sdiv_6s_6ns_6bkb_U1;
    delete ex3_mac_muladd_6scud_U2;
}

void ex3::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void ex3::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
}

void ex3::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void ex3::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void ex3::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void ex3::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void ex3::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void ex3::thread_c_V() {
    c_V = grp_fu_45_p3.read();
}

void ex3::thread_c_V_ap_vld() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        c_V_ap_vld = ap_const_logic_1;
    } else {
        c_V_ap_vld = ap_const_logic_0;
    }
}

void ex3::thread_grp_fu_35_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        grp_fu_35_ap_start = ap_const_logic_1;
    } else {
        grp_fu_35_ap_start = ap_const_logic_0;
    }
}

void ex3::thread_grp_fu_45_p2() {
    grp_fu_45_p2 = (!b_V.read().is_01() || !z_V_fu_41_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(b_V.read()) - sc_bigint<6>(z_V_fu_41_p1.read()));
}

void ex3::thread_z_V_fu_41_p1() {
    z_V_fu_41_p1 = a_V.read();
}

void ex3::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXX";
            break;
    }
}

void ex3::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"a_V\" :  \"" << a_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_V\" :  \"" << b_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_V\" :  \"" << c_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_V_ap_vld\" :  \"" << c_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

