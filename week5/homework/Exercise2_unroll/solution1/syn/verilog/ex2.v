// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ex2,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.494000,HLS_SYN_LAT=78,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=187,HLS_SYN_LUT=845,HLS_VERSION=2020_1}" *)

module ex2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] A_address0;
output   A_ce0;
input  [4:0] A_q0;
output  [2:0] B_address0;
output   B_ce0;
input  [4:0] B_q0;
output  [2:0] C_address0;
output   C_ce0;
output   C_we0;
output  [5:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[5:0] A_address0;
reg A_ce0;
reg[2:0] B_address0;
reg B_ce0;
reg[2:0] C_address0;
reg C_ce0;
reg C_we0;
reg[5:0] C_d0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [11:0] acc_1_0_load_reg_858;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln10_fu_325_p2;
reg   [2:0] add_ln10_reg_867;
wire   [0:0] icmp_ln10_fu_319_p2;
wire   [0:0] icmp_ln12_fu_337_p2;
reg   [0:0] icmp_ln12_reg_882;
reg   [11:0] acc_1_1_load_reg_899;
wire    ap_CS_fsm_state4;
wire   [2:0] add_ln10_1_fu_399_p2;
reg   [2:0] add_ln10_1_reg_908;
wire   [0:0] icmp_ln10_1_fu_393_p2;
wire   [0:0] icmp_ln12_1_fu_425_p2;
reg   [0:0] icmp_ln12_1_reg_923;
reg   [11:0] acc_1_2_load_reg_940;
wire    ap_CS_fsm_state6;
wire   [2:0] add_ln10_2_fu_492_p2;
reg   [2:0] add_ln10_2_reg_949;
wire   [0:0] icmp_ln10_2_fu_486_p2;
wire   [0:0] icmp_ln12_2_fu_518_p2;
reg   [0:0] icmp_ln12_2_reg_964;
reg   [11:0] acc_1_3_load_reg_981;
wire    ap_CS_fsm_state8;
wire   [2:0] add_ln10_3_fu_585_p2;
reg   [2:0] add_ln10_3_reg_990;
wire   [0:0] icmp_ln10_3_fu_579_p2;
wire   [0:0] icmp_ln12_3_fu_611_p2;
reg   [0:0] icmp_ln12_3_reg_1005;
reg   [11:0] acc_1_4_load_reg_1022;
wire    ap_CS_fsm_state10;
wire   [2:0] add_ln10_4_fu_678_p2;
reg   [2:0] add_ln10_4_reg_1031;
wire   [0:0] icmp_ln10_4_fu_672_p2;
wire   [0:0] icmp_ln12_4_fu_698_p2;
reg   [0:0] icmp_ln12_4_reg_1046;
wire   [2:0] add_ln10_5_fu_762_p2;
reg   [2:0] add_ln10_5_reg_1066;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln10_5_fu_756_p2;
wire   [0:0] icmp_ln12_5_fu_788_p2;
reg   [0:0] icmp_ln12_5_reg_1081;
reg   [2:0] j_0_0_reg_245;
wire    ap_CS_fsm_state3;
reg   [2:0] j_0_1_reg_256;
wire    ap_CS_fsm_state5;
reg   [2:0] j_0_2_reg_267;
wire    ap_CS_fsm_state7;
reg   [2:0] j_0_3_reg_278;
wire    ap_CS_fsm_state9;
reg   [2:0] j_0_4_reg_289;
wire    ap_CS_fsm_state11;
reg   [2:0] j_0_5_reg_300;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln11_fu_331_p1;
wire   [63:0] zext_ln11_7_fu_420_p1;
wire   [63:0] zext_ln11_1_fu_405_p1;
wire   [63:0] zext_ln11_9_fu_513_p1;
wire   [63:0] zext_ln11_2_fu_498_p1;
wire   [63:0] zext_ln11_11_fu_606_p1;
wire   [63:0] zext_ln11_3_fu_591_p1;
wire   [63:0] tmp_6_fu_689_p3;
wire   [63:0] zext_ln11_4_fu_684_p1;
wire   [63:0] zext_ln11_13_fu_783_p1;
wire   [63:0] zext_ln11_5_fu_768_p1;
reg   [11:0] acc_1_0_fu_62;
wire   [11:0] add_ln11_fu_373_p2;
reg   [11:0] acc_1_1_fu_66;
wire   [11:0] add_ln11_1_fu_461_p2;
reg   [11:0] acc_1_2_fu_70;
wire   [11:0] add_ln11_2_fu_554_p2;
reg   [11:0] acc_1_3_fu_74;
wire   [11:0] add_ln11_3_fu_647_p2;
reg   [11:0] acc_1_4_fu_78;
wire   [11:0] add_ln11_4_fu_734_p2;
reg   [11:0] acc_1_5_fu_82;
wire   [11:0] add_ln11_5_fu_823_p2;
wire   [5:0] add_ln13_fu_383_p2;
wire   [5:0] add_ln13_1_fu_471_p2;
wire   [5:0] add_ln13_2_fu_564_p2;
wire   [5:0] add_ln13_3_fu_657_p2;
wire   [5:0] add_ln13_4_fu_744_p2;
wire   [5:0] add_ln13_5_fu_834_p2;
wire  signed [4:0] mul_ln11_fu_356_p0;
wire  signed [4:0] mul_ln11_fu_356_p1;
wire  signed [9:0] mul_ln11_fu_356_p2;
wire  signed [11:0] sext_ln11_2_fu_362_p1;
wire   [5:0] trunc_ln11_1_fu_369_p1;
wire   [5:0] trunc_ln11_fu_366_p1;
wire   [3:0] zext_ln11_6_fu_410_p1;
wire   [3:0] add_ln11_6_fu_414_p2;
wire  signed [4:0] mul_ln11_1_fu_444_p0;
wire  signed [4:0] mul_ln11_1_fu_444_p1;
wire  signed [9:0] mul_ln11_1_fu_444_p2;
wire  signed [11:0] sext_ln11_5_fu_450_p1;
wire   [5:0] trunc_ln11_3_fu_457_p1;
wire   [5:0] trunc_ln11_2_fu_454_p1;
wire   [4:0] zext_ln11_8_fu_503_p1;
wire   [4:0] add_ln11_7_fu_507_p2;
wire  signed [4:0] mul_ln11_2_fu_537_p0;
wire  signed [4:0] mul_ln11_2_fu_537_p1;
wire  signed [9:0] mul_ln11_2_fu_537_p2;
wire  signed [11:0] sext_ln11_8_fu_543_p1;
wire   [5:0] trunc_ln11_5_fu_550_p1;
wire   [5:0] trunc_ln11_4_fu_547_p1;
wire   [4:0] zext_ln11_10_fu_596_p1;
wire   [4:0] add_ln11_8_fu_600_p2;
wire  signed [4:0] mul_ln11_3_fu_630_p0;
wire  signed [4:0] mul_ln11_3_fu_630_p1;
wire  signed [9:0] mul_ln11_3_fu_630_p2;
wire  signed [11:0] sext_ln11_11_fu_636_p1;
wire   [5:0] trunc_ln11_7_fu_643_p1;
wire   [5:0] trunc_ln11_6_fu_640_p1;
wire  signed [4:0] mul_ln11_4_fu_717_p0;
wire  signed [4:0] mul_ln11_4_fu_717_p1;
wire  signed [9:0] mul_ln11_4_fu_717_p2;
wire  signed [11:0] sext_ln11_14_fu_723_p1;
wire   [5:0] trunc_ln11_9_fu_730_p1;
wire   [5:0] trunc_ln11_8_fu_727_p1;
wire   [5:0] zext_ln11_12_fu_773_p1;
wire   [5:0] add_ln11_9_fu_777_p2;
wire  signed [4:0] mul_ln11_5_fu_805_p0;
wire  signed [4:0] mul_ln11_5_fu_805_p1;
wire  signed [9:0] mul_ln11_5_fu_805_p2;
wire  signed [11:0] sext_ln11_17_fu_811_p1;
wire   [5:0] trunc_ln11_11_fu_819_p1;
wire   [5:0] trunc_ln11_10_fu_815_p1;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_reg_882 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        acc_1_0_fu_62 <= add_ln11_fu_373_p2;
    end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((icmp_ln12_reg_882 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        acc_1_0_fu_62 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_1_reg_923 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        acc_1_1_fu_66 <= 12'd0;
    end else if (((icmp_ln12_1_reg_923 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        acc_1_1_fu_66 <= add_ln11_1_fu_461_p2;
    end else if (((icmp_ln10_fu_319_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        acc_1_1_fu_66 <= acc_1_0_fu_62;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_2_reg_964 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        acc_1_2_fu_70 <= 12'd0;
    end else if (((icmp_ln12_2_reg_964 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        acc_1_2_fu_70 <= add_ln11_2_fu_554_p2;
    end else if (((icmp_ln10_1_fu_393_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        acc_1_2_fu_70 <= acc_1_1_fu_66;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_3_reg_1005 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        acc_1_3_fu_74 <= 12'd0;
    end else if (((icmp_ln12_3_reg_1005 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        acc_1_3_fu_74 <= add_ln11_3_fu_647_p2;
    end else if (((icmp_ln10_2_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        acc_1_3_fu_74 <= acc_1_2_fu_70;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_4_reg_1046 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        acc_1_4_fu_78 <= 12'd0;
    end else if (((icmp_ln12_4_reg_1046 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        acc_1_4_fu_78 <= add_ln11_4_fu_734_p2;
    end else if (((icmp_ln10_3_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        acc_1_4_fu_78 <= acc_1_3_fu_74;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_5_reg_1081 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        acc_1_5_fu_82 <= 12'd0;
    end else if (((icmp_ln12_5_reg_1081 == 1'd0) & (1'b1 == ap_CS_fsm_state13))) begin
        acc_1_5_fu_82 <= add_ln11_5_fu_823_p2;
    end else if (((icmp_ln10_4_fu_672_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        acc_1_5_fu_82 <= acc_1_4_fu_78;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_0_0_reg_245 <= add_ln10_reg_867;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_0_reg_245 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_0_1_reg_256 <= add_ln10_1_reg_908;
    end else if (((icmp_ln10_fu_319_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_1_reg_256 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_0_2_reg_267 <= add_ln10_2_reg_949;
    end else if (((icmp_ln10_1_fu_393_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        j_0_2_reg_267 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_3_reg_278 <= add_ln10_3_reg_990;
    end else if (((icmp_ln10_2_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        j_0_3_reg_278 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        j_0_4_reg_289 <= add_ln10_4_reg_1031;
    end else if (((icmp_ln10_3_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
        j_0_4_reg_289 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_0_5_reg_300 <= add_ln10_5_reg_1066;
    end else if (((icmp_ln10_4_fu_672_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        j_0_5_reg_300 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_1_0_load_reg_858 <= acc_1_0_fu_62;
        add_ln10_reg_867 <= add_ln10_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_1_1_load_reg_899 <= acc_1_1_fu_66;
        add_ln10_1_reg_908 <= add_ln10_1_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        acc_1_2_load_reg_940 <= acc_1_2_fu_70;
        add_ln10_2_reg_949 <= add_ln10_2_fu_492_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        acc_1_3_load_reg_981 <= acc_1_3_fu_74;
        add_ln10_3_reg_990 <= add_ln10_3_fu_585_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        acc_1_4_load_reg_1022 <= acc_1_4_fu_78;
        add_ln10_4_reg_1031 <= add_ln10_4_fu_678_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln10_5_reg_1066 <= add_ln10_5_fu_762_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_1_fu_393_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        icmp_ln12_1_reg_923 <= icmp_ln12_1_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_2_fu_486_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        icmp_ln12_2_reg_964 <= icmp_ln12_2_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_3_fu_579_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        icmp_ln12_3_reg_1005 <= icmp_ln12_3_fu_611_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_4_fu_672_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        icmp_ln12_4_reg_1046 <= icmp_ln12_4_fu_698_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_5_fu_756_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        icmp_ln12_5_reg_1081 <= icmp_ln12_5_fu_788_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_319_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln12_reg_882 <= icmp_ln12_fu_337_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        A_address0 = zext_ln11_13_fu_783_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        A_address0 = tmp_6_fu_689_p3;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        A_address0 = zext_ln11_11_fu_606_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        A_address0 = zext_ln11_9_fu_513_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        A_address0 = zext_ln11_7_fu_420_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        A_address0 = zext_ln11_fu_331_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        B_address0 = zext_ln11_5_fu_768_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        B_address0 = zext_ln11_4_fu_684_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        B_address0 = zext_ln11_3_fu_591_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        B_address0 = zext_ln11_2_fu_498_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        B_address0 = zext_ln11_1_fu_405_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        B_address0 = zext_ln11_fu_331_p1;
    end else begin
        B_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state6))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        C_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        C_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        C_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        C_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        C_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_address0 = 64'd0;
    end else begin
        C_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3))) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        C_d0 = add_ln13_5_fu_834_p2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        C_d0 = add_ln13_4_fu_744_p2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        C_d0 = add_ln13_3_fu_657_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        C_d0 = add_ln13_2_fu_564_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        C_d0 = add_ln13_1_fu_471_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        C_d0 = add_ln13_fu_383_p2;
    end else begin
        C_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln12_5_reg_1081 == 1'd1) & (1'b1 == ap_CS_fsm_state13)) | ((icmp_ln12_4_reg_1046 == 1'd1) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln12_3_reg_1005 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((icmp_ln12_2_reg_964 == 1'd1) & (1'b1 == ap_CS_fsm_state7)) | ((icmp_ln12_1_reg_923 == 1'd1) & (1'b1 == ap_CS_fsm_state5)) | ((icmp_ln12_reg_882 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_5_fu_756_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_5_fu_756_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_319_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln10_1_fu_393_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln10_2_fu_486_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((icmp_ln10_3_fu_579_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln10_4_fu_672_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state12 : begin
            if (((icmp_ln10_5_fu_756_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_1_fu_399_p2 = (j_0_1_reg_256 + 3'd1);

assign add_ln10_2_fu_492_p2 = (j_0_2_reg_267 + 3'd1);

assign add_ln10_3_fu_585_p2 = (j_0_3_reg_278 + 3'd1);

assign add_ln10_4_fu_678_p2 = (j_0_4_reg_289 + 3'd1);

assign add_ln10_5_fu_762_p2 = (j_0_5_reg_300 + 3'd1);

assign add_ln10_fu_325_p2 = (j_0_0_reg_245 + 3'd1);

assign add_ln11_1_fu_461_p2 = ($signed(sext_ln11_5_fu_450_p1) + $signed(acc_1_1_load_reg_899));

assign add_ln11_2_fu_554_p2 = ($signed(sext_ln11_8_fu_543_p1) + $signed(acc_1_2_load_reg_940));

assign add_ln11_3_fu_647_p2 = ($signed(sext_ln11_11_fu_636_p1) + $signed(acc_1_3_load_reg_981));

assign add_ln11_4_fu_734_p2 = ($signed(sext_ln11_14_fu_723_p1) + $signed(acc_1_4_load_reg_1022));

assign add_ln11_5_fu_823_p2 = ($signed(sext_ln11_17_fu_811_p1) + $signed(acc_1_5_fu_82));

assign add_ln11_6_fu_414_p2 = (4'd6 + zext_ln11_6_fu_410_p1);

assign add_ln11_7_fu_507_p2 = (5'd12 + zext_ln11_8_fu_503_p1);

assign add_ln11_8_fu_600_p2 = ($signed(5'd18) + $signed(zext_ln11_10_fu_596_p1));

assign add_ln11_9_fu_777_p2 = (6'd30 + zext_ln11_12_fu_773_p1);

assign add_ln11_fu_373_p2 = ($signed(acc_1_0_load_reg_858) + $signed(sext_ln11_2_fu_362_p1));

assign add_ln13_1_fu_471_p2 = (trunc_ln11_3_fu_457_p1 + trunc_ln11_2_fu_454_p1);

assign add_ln13_2_fu_564_p2 = (trunc_ln11_5_fu_550_p1 + trunc_ln11_4_fu_547_p1);

assign add_ln13_3_fu_657_p2 = (trunc_ln11_7_fu_643_p1 + trunc_ln11_6_fu_640_p1);

assign add_ln13_4_fu_744_p2 = (trunc_ln11_9_fu_730_p1 + trunc_ln11_8_fu_727_p1);

assign add_ln13_5_fu_834_p2 = (trunc_ln11_11_fu_819_p1 + trunc_ln11_10_fu_815_p1);

assign add_ln13_fu_383_p2 = (trunc_ln11_1_fu_369_p1 + trunc_ln11_fu_366_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign icmp_ln10_1_fu_393_p2 = ((j_0_1_reg_256 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln10_2_fu_486_p2 = ((j_0_2_reg_267 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln10_3_fu_579_p2 = ((j_0_3_reg_278 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln10_4_fu_672_p2 = ((j_0_4_reg_289 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln10_5_fu_756_p2 = ((j_0_5_reg_300 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln10_fu_319_p2 = ((j_0_0_reg_245 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln12_1_fu_425_p2 = ((j_0_1_reg_256 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln12_2_fu_518_p2 = ((j_0_2_reg_267 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln12_3_fu_611_p2 = ((j_0_3_reg_278 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln12_4_fu_698_p2 = ((j_0_4_reg_289 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln12_5_fu_788_p2 = ((j_0_5_reg_300 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_337_p2 = ((j_0_0_reg_245 == 3'd5) ? 1'b1 : 1'b0);

assign mul_ln11_1_fu_444_p0 = B_q0;

assign mul_ln11_1_fu_444_p1 = A_q0;

assign mul_ln11_1_fu_444_p2 = ($signed(mul_ln11_1_fu_444_p0) * $signed(mul_ln11_1_fu_444_p1));

assign mul_ln11_2_fu_537_p0 = B_q0;

assign mul_ln11_2_fu_537_p1 = A_q0;

assign mul_ln11_2_fu_537_p2 = ($signed(mul_ln11_2_fu_537_p0) * $signed(mul_ln11_2_fu_537_p1));

assign mul_ln11_3_fu_630_p0 = B_q0;

assign mul_ln11_3_fu_630_p1 = A_q0;

assign mul_ln11_3_fu_630_p2 = ($signed(mul_ln11_3_fu_630_p0) * $signed(mul_ln11_3_fu_630_p1));

assign mul_ln11_4_fu_717_p0 = B_q0;

assign mul_ln11_4_fu_717_p1 = A_q0;

assign mul_ln11_4_fu_717_p2 = ($signed(mul_ln11_4_fu_717_p0) * $signed(mul_ln11_4_fu_717_p1));

assign mul_ln11_5_fu_805_p0 = B_q0;

assign mul_ln11_5_fu_805_p1 = A_q0;

assign mul_ln11_5_fu_805_p2 = ($signed(mul_ln11_5_fu_805_p0) * $signed(mul_ln11_5_fu_805_p1));

assign mul_ln11_fu_356_p0 = A_q0;

assign mul_ln11_fu_356_p1 = B_q0;

assign mul_ln11_fu_356_p2 = ($signed(mul_ln11_fu_356_p0) * $signed(mul_ln11_fu_356_p1));

assign sext_ln11_11_fu_636_p1 = mul_ln11_3_fu_630_p2;

assign sext_ln11_14_fu_723_p1 = mul_ln11_4_fu_717_p2;

assign sext_ln11_17_fu_811_p1 = mul_ln11_5_fu_805_p2;

assign sext_ln11_2_fu_362_p1 = mul_ln11_fu_356_p2;

assign sext_ln11_5_fu_450_p1 = mul_ln11_1_fu_444_p2;

assign sext_ln11_8_fu_543_p1 = mul_ln11_2_fu_537_p2;

assign tmp_6_fu_689_p3 = {{61'd3}, {j_0_4_reg_289}};

assign trunc_ln11_10_fu_815_p1 = acc_1_5_fu_82[5:0];

assign trunc_ln11_11_fu_819_p1 = mul_ln11_5_fu_805_p2[5:0];

assign trunc_ln11_1_fu_369_p1 = mul_ln11_fu_356_p2[5:0];

assign trunc_ln11_2_fu_454_p1 = acc_1_1_load_reg_899[5:0];

assign trunc_ln11_3_fu_457_p1 = mul_ln11_1_fu_444_p2[5:0];

assign trunc_ln11_4_fu_547_p1 = acc_1_2_load_reg_940[5:0];

assign trunc_ln11_5_fu_550_p1 = mul_ln11_2_fu_537_p2[5:0];

assign trunc_ln11_6_fu_640_p1 = acc_1_3_load_reg_981[5:0];

assign trunc_ln11_7_fu_643_p1 = mul_ln11_3_fu_630_p2[5:0];

assign trunc_ln11_8_fu_727_p1 = acc_1_4_load_reg_1022[5:0];

assign trunc_ln11_9_fu_730_p1 = mul_ln11_4_fu_717_p2[5:0];

assign trunc_ln11_fu_366_p1 = acc_1_0_load_reg_858[5:0];

assign zext_ln11_10_fu_596_p1 = j_0_3_reg_278;

assign zext_ln11_11_fu_606_p1 = add_ln11_8_fu_600_p2;

assign zext_ln11_12_fu_773_p1 = j_0_5_reg_300;

assign zext_ln11_13_fu_783_p1 = add_ln11_9_fu_777_p2;

assign zext_ln11_1_fu_405_p1 = j_0_1_reg_256;

assign zext_ln11_2_fu_498_p1 = j_0_2_reg_267;

assign zext_ln11_3_fu_591_p1 = j_0_3_reg_278;

assign zext_ln11_4_fu_684_p1 = j_0_4_reg_289;

assign zext_ln11_5_fu_768_p1 = j_0_5_reg_300;

assign zext_ln11_6_fu_410_p1 = j_0_1_reg_256;

assign zext_ln11_7_fu_420_p1 = add_ln11_6_fu_414_p2;

assign zext_ln11_8_fu_503_p1 = j_0_2_reg_267;

assign zext_ln11_9_fu_513_p1 = add_ln11_7_fu_507_p2;

assign zext_ln11_fu_331_p1 = j_0_0_reg_245;

endmodule //ex2
