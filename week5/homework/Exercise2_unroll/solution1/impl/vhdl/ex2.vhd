-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ex2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of ex2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ex2,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.494000,HLS_SYN_LAT=78,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=187,HLS_SYN_LUT=845,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv61_3 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv6_1E : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal acc_1_0_load_reg_858 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln10_fu_325_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln10_reg_867 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln10_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_882 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_1_1_load_reg_899 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln10_1_fu_399_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln10_1_reg_908 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln10_1_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_1_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_1_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_1_2_load_reg_940 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln10_2_fu_492_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln10_2_reg_949 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln10_2_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_2_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_2_reg_964 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_1_3_load_reg_981 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln10_3_fu_585_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln10_3_reg_990 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln10_3_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_3_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_3_reg_1005 : STD_LOGIC_VECTOR (0 downto 0);
    signal acc_1_4_load_reg_1022 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln10_4_fu_678_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln10_4_reg_1031 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln10_4_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_4_fu_698_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_4_reg_1046 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_5_fu_762_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln10_5_reg_1066 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal icmp_ln10_5_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_5_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_5_reg_1081 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_0_reg_245 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_0_1_reg_256 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal j_0_2_reg_267 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_0_3_reg_278 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal j_0_4_reg_289 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal j_0_5_reg_300 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln11_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_7_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_1_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_9_fu_513_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_2_fu_498_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_11_fu_606_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_3_fu_591_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_689_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_4_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_13_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln11_5_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal acc_1_0_fu_62 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln11_fu_373_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal acc_1_1_fu_66 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln11_1_fu_461_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal acc_1_2_fu_70 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln11_2_fu_554_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal acc_1_3_fu_74 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln11_3_fu_647_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal acc_1_4_fu_78 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln11_4_fu_734_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal acc_1_5_fu_82 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln11_5_fu_823_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln13_fu_383_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_1_fu_471_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_2_fu_564_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_3_fu_657_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_4_fu_744_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_5_fu_834_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln11_fu_356_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_fu_356_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_fu_356_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln11_2_fu_362_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln11_1_fu_369_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln11_fu_366_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln11_6_fu_410_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln11_6_fu_414_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln11_1_fu_444_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_1_fu_444_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_1_fu_444_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln11_5_fu_450_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln11_3_fu_457_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln11_2_fu_454_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln11_8_fu_503_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_7_fu_507_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_2_fu_537_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_2_fu_537_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_2_fu_537_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln11_8_fu_543_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln11_5_fu_550_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln11_4_fu_547_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln11_10_fu_596_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_8_fu_600_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_3_fu_630_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_3_fu_630_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_3_fu_630_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln11_11_fu_636_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln11_7_fu_643_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln11_6_fu_640_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln11_4_fu_717_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_4_fu_717_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_4_fu_717_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln11_14_fu_723_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln11_9_fu_730_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln11_8_fu_727_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln11_12_fu_773_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln11_9_fu_777_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln11_5_fu_805_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_5_fu_805_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln11_5_fu_805_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln11_17_fu_811_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln11_11_fu_819_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln11_10_fu_815_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    acc_1_0_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_reg_882 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                acc_1_0_fu_62 <= add_ln11_fu_373_p2;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((icmp_ln12_reg_882 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                acc_1_0_fu_62 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    acc_1_1_fu_66_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_1_reg_923 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_1_1_fu_66 <= ap_const_lv12_0;
            elsif (((icmp_ln12_1_reg_923 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                acc_1_1_fu_66 <= add_ln11_1_fu_461_p2;
            elsif (((icmp_ln10_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                acc_1_1_fu_66 <= acc_1_0_fu_62;
            end if; 
        end if;
    end process;

    acc_1_2_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_2_reg_964 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                acc_1_2_fu_70 <= ap_const_lv12_0;
            elsif (((icmp_ln12_2_reg_964 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                acc_1_2_fu_70 <= add_ln11_2_fu_554_p2;
            elsif (((icmp_ln10_1_fu_393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                acc_1_2_fu_70 <= acc_1_1_fu_66;
            end if; 
        end if;
    end process;

    acc_1_3_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_3_reg_1005 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                acc_1_3_fu_74 <= ap_const_lv12_0;
            elsif (((icmp_ln12_3_reg_1005 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                acc_1_3_fu_74 <= add_ln11_3_fu_647_p2;
            elsif (((icmp_ln10_2_fu_486_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                acc_1_3_fu_74 <= acc_1_2_fu_70;
            end if; 
        end if;
    end process;

    acc_1_4_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_4_reg_1046 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                acc_1_4_fu_78 <= ap_const_lv12_0;
            elsif (((icmp_ln12_4_reg_1046 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                acc_1_4_fu_78 <= add_ln11_4_fu_734_p2;
            elsif (((icmp_ln10_3_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                acc_1_4_fu_78 <= acc_1_3_fu_74;
            end if; 
        end if;
    end process;

    acc_1_5_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_5_reg_1081 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                acc_1_5_fu_82 <= ap_const_lv12_0;
            elsif (((icmp_ln12_5_reg_1081 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                acc_1_5_fu_82 <= add_ln11_5_fu_823_p2;
            elsif (((icmp_ln10_4_fu_672_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                acc_1_5_fu_82 <= acc_1_4_fu_78;
            end if; 
        end if;
    end process;

    j_0_0_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_0_reg_245 <= add_ln10_reg_867;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_0_reg_245 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_1_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_1_reg_256 <= add_ln10_1_reg_908;
            elsif (((icmp_ln10_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_1_reg_256 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_2_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_2_reg_267 <= add_ln10_2_reg_949;
            elsif (((icmp_ln10_1_fu_393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                j_0_2_reg_267 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_3_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_0_3_reg_278 <= add_ln10_3_reg_990;
            elsif (((icmp_ln10_2_fu_486_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                j_0_3_reg_278 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_4_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                j_0_4_reg_289 <= add_ln10_4_reg_1031;
            elsif (((icmp_ln10_3_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                j_0_4_reg_289 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_5_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_0_5_reg_300 <= add_ln10_5_reg_1066;
            elsif (((icmp_ln10_4_fu_672_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                j_0_5_reg_300 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                acc_1_0_load_reg_858 <= acc_1_0_fu_62;
                add_ln10_reg_867 <= add_ln10_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                acc_1_1_load_reg_899 <= acc_1_1_fu_66;
                add_ln10_1_reg_908 <= add_ln10_1_fu_399_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                acc_1_2_load_reg_940 <= acc_1_2_fu_70;
                add_ln10_2_reg_949 <= add_ln10_2_fu_492_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                acc_1_3_load_reg_981 <= acc_1_3_fu_74;
                add_ln10_3_reg_990 <= add_ln10_3_fu_585_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                acc_1_4_load_reg_1022 <= acc_1_4_fu_78;
                add_ln10_4_reg_1031 <= add_ln10_4_fu_678_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                add_ln10_5_reg_1066 <= add_ln10_5_fu_762_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_1_fu_393_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                icmp_ln12_1_reg_923 <= icmp_ln12_1_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_2_fu_486_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                icmp_ln12_2_reg_964 <= icmp_ln12_2_fu_518_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_3_fu_579_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                icmp_ln12_3_reg_1005 <= icmp_ln12_3_fu_611_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_4_fu_672_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                icmp_ln12_4_reg_1046 <= icmp_ln12_4_fu_698_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_5_fu_756_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                icmp_ln12_5_reg_1081 <= icmp_ln12_5_fu_788_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_319_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln12_reg_882 <= icmp_ln12_fu_337_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_319_p2, ap_CS_fsm_state4, icmp_ln10_1_fu_393_p2, ap_CS_fsm_state6, icmp_ln10_2_fu_486_p2, ap_CS_fsm_state8, icmp_ln10_3_fu_579_p2, ap_CS_fsm_state10, icmp_ln10_4_fu_672_p2, ap_CS_fsm_state12, icmp_ln10_5_fu_756_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_319_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln10_1_fu_393_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln10_2_fu_486_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((icmp_ln10_3_fu_579_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state10 => 
                if (((icmp_ln10_4_fu_672_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln10_5_fu_756_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, zext_ln11_fu_331_p1, zext_ln11_7_fu_420_p1, zext_ln11_9_fu_513_p1, zext_ln11_11_fu_606_p1, tmp_6_fu_689_p3, zext_ln11_13_fu_783_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            A_address0 <= zext_ln11_13_fu_783_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            A_address0 <= tmp_6_fu_689_p3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            A_address0 <= zext_ln11_11_fu_606_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            A_address0 <= zext_ln11_9_fu_513_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            A_address0 <= zext_ln11_7_fu_420_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            A_address0 <= zext_ln11_fu_331_p1(6 - 1 downto 0);
        else 
            A_address0 <= "XXXXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12, zext_ln11_fu_331_p1, zext_ln11_1_fu_405_p1, zext_ln11_2_fu_498_p1, zext_ln11_3_fu_591_p1, zext_ln11_4_fu_684_p1, zext_ln11_5_fu_768_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            B_address0 <= zext_ln11_5_fu_768_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            B_address0 <= zext_ln11_4_fu_684_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            B_address0 <= zext_ln11_3_fu_591_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_address0 <= zext_ln11_2_fu_498_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            B_address0 <= zext_ln11_1_fu_405_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            B_address0 <= zext_ln11_fu_331_p1(3 - 1 downto 0);
        else 
            B_address0 <= "XXX";
        end if; 
    end process;


    B_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            C_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            C_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            C_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            C_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            C_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            C_address0 <= "XXX";
        end if; 
    end process;


    C_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_d0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13, add_ln13_fu_383_p2, add_ln13_1_fu_471_p2, add_ln13_2_fu_564_p2, add_ln13_3_fu_657_p2, add_ln13_4_fu_744_p2, add_ln13_5_fu_834_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            C_d0 <= add_ln13_5_fu_834_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            C_d0 <= add_ln13_4_fu_744_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            C_d0 <= add_ln13_3_fu_657_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            C_d0 <= add_ln13_2_fu_564_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            C_d0 <= add_ln13_1_fu_471_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            C_d0 <= add_ln13_fu_383_p2;
        else 
            C_d0 <= "XXXXXX";
        end if; 
    end process;


    C_we0_assign_proc : process(icmp_ln12_reg_882, icmp_ln12_1_reg_923, icmp_ln12_2_reg_964, icmp_ln12_3_reg_1005, icmp_ln12_4_reg_1046, icmp_ln12_5_reg_1081, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state13)
    begin
        if ((((icmp_ln12_5_reg_1081 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((icmp_ln12_4_reg_1046 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln12_3_reg_1005 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((icmp_ln12_2_reg_964 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)) or ((icmp_ln12_1_reg_923 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((icmp_ln12_reg_882 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln10_1_fu_399_p2 <= std_logic_vector(unsigned(j_0_1_reg_256) + unsigned(ap_const_lv3_1));
    add_ln10_2_fu_492_p2 <= std_logic_vector(unsigned(j_0_2_reg_267) + unsigned(ap_const_lv3_1));
    add_ln10_3_fu_585_p2 <= std_logic_vector(unsigned(j_0_3_reg_278) + unsigned(ap_const_lv3_1));
    add_ln10_4_fu_678_p2 <= std_logic_vector(unsigned(j_0_4_reg_289) + unsigned(ap_const_lv3_1));
    add_ln10_5_fu_762_p2 <= std_logic_vector(unsigned(j_0_5_reg_300) + unsigned(ap_const_lv3_1));
    add_ln10_fu_325_p2 <= std_logic_vector(unsigned(j_0_0_reg_245) + unsigned(ap_const_lv3_1));
    add_ln11_1_fu_461_p2 <= std_logic_vector(signed(sext_ln11_5_fu_450_p1) + signed(acc_1_1_load_reg_899));
    add_ln11_2_fu_554_p2 <= std_logic_vector(signed(sext_ln11_8_fu_543_p1) + signed(acc_1_2_load_reg_940));
    add_ln11_3_fu_647_p2 <= std_logic_vector(signed(sext_ln11_11_fu_636_p1) + signed(acc_1_3_load_reg_981));
    add_ln11_4_fu_734_p2 <= std_logic_vector(signed(sext_ln11_14_fu_723_p1) + signed(acc_1_4_load_reg_1022));
    add_ln11_5_fu_823_p2 <= std_logic_vector(signed(sext_ln11_17_fu_811_p1) + signed(acc_1_5_fu_82));
    add_ln11_6_fu_414_p2 <= std_logic_vector(unsigned(ap_const_lv4_6) + unsigned(zext_ln11_6_fu_410_p1));
    add_ln11_7_fu_507_p2 <= std_logic_vector(unsigned(ap_const_lv5_C) + unsigned(zext_ln11_8_fu_503_p1));
    add_ln11_8_fu_600_p2 <= std_logic_vector(signed(ap_const_lv5_12) + signed(zext_ln11_10_fu_596_p1));
    add_ln11_9_fu_777_p2 <= std_logic_vector(unsigned(ap_const_lv6_1E) + unsigned(zext_ln11_12_fu_773_p1));
    add_ln11_fu_373_p2 <= std_logic_vector(unsigned(acc_1_0_load_reg_858) + unsigned(sext_ln11_2_fu_362_p1));
    add_ln13_1_fu_471_p2 <= std_logic_vector(unsigned(trunc_ln11_3_fu_457_p1) + unsigned(trunc_ln11_2_fu_454_p1));
    add_ln13_2_fu_564_p2 <= std_logic_vector(unsigned(trunc_ln11_5_fu_550_p1) + unsigned(trunc_ln11_4_fu_547_p1));
    add_ln13_3_fu_657_p2 <= std_logic_vector(unsigned(trunc_ln11_7_fu_643_p1) + unsigned(trunc_ln11_6_fu_640_p1));
    add_ln13_4_fu_744_p2 <= std_logic_vector(unsigned(trunc_ln11_9_fu_730_p1) + unsigned(trunc_ln11_8_fu_727_p1));
    add_ln13_5_fu_834_p2 <= std_logic_vector(unsigned(trunc_ln11_11_fu_819_p1) + unsigned(trunc_ln11_10_fu_815_p1));
    add_ln13_fu_383_p2 <= std_logic_vector(unsigned(trunc_ln11_1_fu_369_p1) + unsigned(trunc_ln11_fu_366_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state12, icmp_ln10_5_fu_756_p2)
    begin
        if (((icmp_ln10_5_fu_756_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, icmp_ln10_5_fu_756_p2)
    begin
        if (((icmp_ln10_5_fu_756_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln10_1_fu_393_p2 <= "1" when (j_0_1_reg_256 = ap_const_lv3_6) else "0";
    icmp_ln10_2_fu_486_p2 <= "1" when (j_0_2_reg_267 = ap_const_lv3_6) else "0";
    icmp_ln10_3_fu_579_p2 <= "1" when (j_0_3_reg_278 = ap_const_lv3_6) else "0";
    icmp_ln10_4_fu_672_p2 <= "1" when (j_0_4_reg_289 = ap_const_lv3_6) else "0";
    icmp_ln10_5_fu_756_p2 <= "1" when (j_0_5_reg_300 = ap_const_lv3_6) else "0";
    icmp_ln10_fu_319_p2 <= "1" when (j_0_0_reg_245 = ap_const_lv3_6) else "0";
    icmp_ln12_1_fu_425_p2 <= "1" when (j_0_1_reg_256 = ap_const_lv3_5) else "0";
    icmp_ln12_2_fu_518_p2 <= "1" when (j_0_2_reg_267 = ap_const_lv3_5) else "0";
    icmp_ln12_3_fu_611_p2 <= "1" when (j_0_3_reg_278 = ap_const_lv3_5) else "0";
    icmp_ln12_4_fu_698_p2 <= "1" when (j_0_4_reg_289 = ap_const_lv3_5) else "0";
    icmp_ln12_5_fu_788_p2 <= "1" when (j_0_5_reg_300 = ap_const_lv3_5) else "0";
    icmp_ln12_fu_337_p2 <= "1" when (j_0_0_reg_245 = ap_const_lv3_5) else "0";
    mul_ln11_1_fu_444_p0 <= B_q0;
    mul_ln11_1_fu_444_p1 <= A_q0;
    mul_ln11_1_fu_444_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln11_1_fu_444_p0) * signed(mul_ln11_1_fu_444_p1))), 10));
    mul_ln11_2_fu_537_p0 <= B_q0;
    mul_ln11_2_fu_537_p1 <= A_q0;
    mul_ln11_2_fu_537_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln11_2_fu_537_p0) * signed(mul_ln11_2_fu_537_p1))), 10));
    mul_ln11_3_fu_630_p0 <= B_q0;
    mul_ln11_3_fu_630_p1 <= A_q0;
    mul_ln11_3_fu_630_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln11_3_fu_630_p0) * signed(mul_ln11_3_fu_630_p1))), 10));
    mul_ln11_4_fu_717_p0 <= B_q0;
    mul_ln11_4_fu_717_p1 <= A_q0;
    mul_ln11_4_fu_717_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln11_4_fu_717_p0) * signed(mul_ln11_4_fu_717_p1))), 10));
    mul_ln11_5_fu_805_p0 <= B_q0;
    mul_ln11_5_fu_805_p1 <= A_q0;
    mul_ln11_5_fu_805_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln11_5_fu_805_p0) * signed(mul_ln11_5_fu_805_p1))), 10));
    mul_ln11_fu_356_p0 <= A_q0;
    mul_ln11_fu_356_p1 <= B_q0;
    mul_ln11_fu_356_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln11_fu_356_p0) * signed(mul_ln11_fu_356_p1))), 10));
        sext_ln11_11_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln11_3_fu_630_p2),12));

        sext_ln11_14_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln11_4_fu_717_p2),12));

        sext_ln11_17_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln11_5_fu_805_p2),12));

        sext_ln11_2_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln11_fu_356_p2),12));

        sext_ln11_5_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln11_1_fu_444_p2),12));

        sext_ln11_8_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mul_ln11_2_fu_537_p2),12));

    tmp_6_fu_689_p3 <= (ap_const_lv61_3 & j_0_4_reg_289);
    trunc_ln11_10_fu_815_p1 <= acc_1_5_fu_82(6 - 1 downto 0);
    trunc_ln11_11_fu_819_p1 <= mul_ln11_5_fu_805_p2(6 - 1 downto 0);
    trunc_ln11_1_fu_369_p1 <= mul_ln11_fu_356_p2(6 - 1 downto 0);
    trunc_ln11_2_fu_454_p1 <= acc_1_1_load_reg_899(6 - 1 downto 0);
    trunc_ln11_3_fu_457_p1 <= mul_ln11_1_fu_444_p2(6 - 1 downto 0);
    trunc_ln11_4_fu_547_p1 <= acc_1_2_load_reg_940(6 - 1 downto 0);
    trunc_ln11_5_fu_550_p1 <= mul_ln11_2_fu_537_p2(6 - 1 downto 0);
    trunc_ln11_6_fu_640_p1 <= acc_1_3_load_reg_981(6 - 1 downto 0);
    trunc_ln11_7_fu_643_p1 <= mul_ln11_3_fu_630_p2(6 - 1 downto 0);
    trunc_ln11_8_fu_727_p1 <= acc_1_4_load_reg_1022(6 - 1 downto 0);
    trunc_ln11_9_fu_730_p1 <= mul_ln11_4_fu_717_p2(6 - 1 downto 0);
    trunc_ln11_fu_366_p1 <= acc_1_0_load_reg_858(6 - 1 downto 0);
    zext_ln11_10_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_3_reg_278),5));
    zext_ln11_11_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_8_fu_600_p2),64));
    zext_ln11_12_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_5_reg_300),6));
    zext_ln11_13_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_9_fu_777_p2),64));
    zext_ln11_1_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_1_reg_256),64));
    zext_ln11_2_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_2_reg_267),64));
    zext_ln11_3_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_3_reg_278),64));
    zext_ln11_4_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_4_reg_289),64));
    zext_ln11_5_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_5_reg_300),64));
    zext_ln11_6_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_1_reg_256),4));
    zext_ln11_7_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_6_fu_414_p2),64));
    zext_ln11_8_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_2_reg_267),5));
    zext_ln11_9_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln11_7_fu_507_p2),64));
    zext_ln11_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_0_reg_245),64));
end behav;
