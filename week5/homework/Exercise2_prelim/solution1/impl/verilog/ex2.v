// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ex2,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7k160t-fbg484-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.238000,HLS_SYN_LAT=85,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=1,HLS_SYN_FF=37,HLS_SYN_LUT=120,HLS_VERSION=2020_1}" *)

module ex2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_q0,
        C_address0,
        C_ce0,
        C_we0,
        C_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] A_address0;
output   A_ce0;
input  [4:0] A_q0;
output  [2:0] B_address0;
output   B_ce0;
input  [4:0] B_q0;
output  [2:0] C_address0;
output   C_ce0;
output   C_we0;
output  [5:0] C_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg A_ce0;
reg B_ce0;
reg C_ce0;
reg C_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] i_fu_121_p2;
reg   [2:0] i_reg_216;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln10_fu_127_p1;
reg   [63:0] zext_ln10_reg_221;
wire   [0:0] icmp_ln7_fu_115_p2;
wire   [6:0] sub_ln10_fu_155_p2;
reg   [6:0] sub_ln10_reg_226;
wire   [2:0] j_fu_167_p2;
reg   [2:0] j_reg_234;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln9_fu_161_p2;
wire  signed [11:0] grp_fu_205_p3;
wire    ap_CS_fsm_state4;
reg   [2:0] i_0_reg_81;
reg   [2:0] j_0_reg_92;
reg   [11:0] acc_0_reg_103;
wire  signed [63:0] sext_ln10_3_fu_187_p1;
wire   [63:0] zext_ln10_1_fu_173_p1;
wire   [5:0] tmp_1_fu_131_p3;
wire   [3:0] tmp_2_fu_143_p3;
wire   [6:0] zext_ln10_2_fu_139_p1;
wire   [6:0] zext_ln10_3_fu_151_p1;
wire   [6:0] zext_ln10_4_fu_178_p1;
wire   [6:0] add_ln10_fu_182_p2;
reg   [3:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
end

ex2_mac_muladd_5sbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
ex2_mac_muladd_5sbkb_U1(
    .din0(B_q0),
    .din1(A_q0),
    .din2(acc_0_reg_103),
    .dout(grp_fu_205_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_0_reg_103 <= grp_fu_205_p3;
    end else if (((icmp_ln7_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        acc_0_reg_103 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_81 <= i_reg_216;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_81 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_92 <= j_reg_234;
    end else if (((icmp_ln7_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_92 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_216 <= i_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_234 <= j_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln7_fu_115_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sub_ln10_reg_226[6 : 1] <= sub_ln10_fu_155_p2[6 : 1];
        zext_ln10_reg_221[2 : 0] <= zext_ln10_fu_127_p1[2 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        C_ce0 = 1'b1;
    end else begin
        C_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        C_we0 = 1'b1;
    end else begin
        C_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln7_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln7_fu_115_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln9_fu_161_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = sext_ln10_3_fu_187_p1;

assign B_address0 = zext_ln10_1_fu_173_p1;

assign C_address0 = zext_ln10_reg_221;

assign C_d0 = acc_0_reg_103[5:0];

assign add_ln10_fu_182_p2 = (sub_ln10_reg_226 + zext_ln10_4_fu_178_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign i_fu_121_p2 = (i_0_reg_81 + 3'd1);

assign icmp_ln7_fu_115_p2 = ((i_0_reg_81 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_161_p2 = ((j_0_reg_92 == 3'd6) ? 1'b1 : 1'b0);

assign j_fu_167_p2 = (j_0_reg_92 + 3'd1);

assign sext_ln10_3_fu_187_p1 = $signed(add_ln10_fu_182_p2);

assign sub_ln10_fu_155_p2 = (zext_ln10_2_fu_139_p1 - zext_ln10_3_fu_151_p1);

assign tmp_1_fu_131_p3 = {{i_0_reg_81}, {3'd0}};

assign tmp_2_fu_143_p3 = {{i_0_reg_81}, {1'd0}};

assign zext_ln10_1_fu_173_p1 = j_0_reg_92;

assign zext_ln10_2_fu_139_p1 = tmp_1_fu_131_p3;

assign zext_ln10_3_fu_151_p1 = tmp_2_fu_143_p3;

assign zext_ln10_4_fu_178_p1 = j_0_reg_92;

assign zext_ln10_fu_127_p1 = i_0_reg_81;

always @ (posedge ap_clk) begin
    zext_ln10_reg_221[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    sub_ln10_reg_226[0] <= 1'b0;
end

endmodule //ex2
